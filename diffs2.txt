
Here's part 2, the diffs for the main directory.

                                      Will

RCS file: RCS/giants.H,v
retrieving revision 1.1
diff -c1 -r1.1 giants.H
*** giants.H	1999/10/17 06:53:06	1.1
--- giants.H	1999/10/17 23:17:33
***************
*** 19,20 ****
--- 19,22 ----
  
+ #include <stdio.h>
+ 
  /**************************************************************
***************
*** 289,290 ****
--- 291,305 ----
  void	ggcd(giant xx, giant yy);
+ 
+ /* Outputs thegiant to filepointer. Output is terminated by a newline. */
+ void	gwrite(giant thegiant, FILE *filepointer, int newlines);
+ 
+ void	gwriteln(giant theg, FILE *filepointer);
+ 
+ void	gread(giant theg, FILE *filepointer);
+ 
+ void	justg(giant x);
+ 
+ void	scramble_real(double *x, int n);
+ 
+ unsigned long mulmod(unsigned long a, unsigned long b, unsigned long c);
  
===================================================================
RCS file: RCS/commona.c,v
retrieving revision 1.1
diff -c1 -r1.1 commona.c
*** commona.c	1999/10/17 23:20:02	1.1
--- commona.c	1999/10/17 18:54:31
***************
*** 84,86 ****
  			char	timebuf[30];
! 			char	*work_type;
  			unsigned int len;
--- 84,86 ----
  			char	timebuf[30];
! 			const char	*work_type = "\0";
  			unsigned int len;
***************
*** 103,105 ****
  			if (w.work_type == WORK_ECM) {
! 				sprintf (timebuf, "%d curves with B1=%d\n",
  					 w.curves_to_do, w.B1);
--- 103,105 ----
  			if (w.work_type == WORK_ECM) {
! 				sprintf (timebuf, "%ld curves with B1=%ld\n",
  					 w.curves_to_do, w.B1);
***************
*** 108,110 ****
  			} else if (w.work_type == WORK_PMINUS1) {
! 				sprintf (timebuf, "B1=%d\n", w.B1);
  				if (w.plus1) buf[len] = 'P';
--- 108,110 ----
  			} else if (w.work_type == WORK_PMINUS1) {
! 				sprintf (timebuf, "B1=%ld\n", w.B1);
  				if (w.plus1) buf[len] = 'P';
===================================================================
RCS file: RCS/commonb.c,v
retrieving revision 1.1
diff -c1 -r1.1 commonb.c
*** commonb.c	1999/10/17 06:48:42	1.1
--- commonb.c	1999/10/17 23:17:33
***************
*** 60,67 ****
  	unsigned long x[3];
! 	char	pow[80];
  
  	x[0] = hsw; x[1] = msw; x[2] = lsw;
! 	for (i = 0; i < 79; i++) pow[i] = '0', buf[i] = '0';
! 	pow[78] = '1';
! 	pow[79] = buf[79] = 0;
  
--- 60,67 ----
  	unsigned long x[3];
! 	char	power[80];
  
  	x[0] = hsw; x[1] = msw; x[2] = lsw;
! 	for (i = 0; i < 79; i++) power[i] = '0', buf[i] = '0';
! 	power[78] = '1';
! 	power[79] = buf[79] = 0;
  
***************
*** 73,75 ****
  					buf[k] = buf[k] - '0' +
! 						pow[k] - '0' + carry;
  					carry = buf[k] / 10;
--- 73,75 ----
  					buf[k] = buf[k] - '0' +
! 						power[k] - '0' + carry;
  					carry = buf[k] / 10;
***************
*** 81,86 ****
  			for (k = 79; k--; ) {
! 				pow[k] = (pow[k] - '0') * 2 + carry;
! 				carry = pow[k] / 10;
! 				pow[k] %= 10;
! 				pow[k] += '0';
  			}
--- 81,86 ----
  			for (k = 79; k--; ) {
! 				power[k] = (power[k] - '0') * 2 + carry;
! 				carry = power[k] / 10;
! 				power[k] %= 10;
! 				power[k] += '0';
  			}
***************
*** 135,139 ****
  			low32 >>= 1;
! 			if (high32 & 1) low32 += 0x80000000;
  			high32 >>= 1;
! 			if (val & 1) high32 += 0x80000000;
  			val >>= 1;
--- 135,139 ----
  			low32 >>= 1;
! 			if (high32 & 1) low32 += (0x8000000 << 4);
  			high32 >>= 1;
! 			if (val & 1) high32 += (0x8000000 << 4);
  			val >>= 1;
***************
*** 378,380 ****
  	if (_read (fd, error_count, sizeof (long)) != sizeof (long))
! 		*error_count = 0x80000000 | buggy_error_count;
  	else
--- 378,380 ----
  	if (_read (fd, error_count, sizeof (long)) != sizeof (long))
! 		*error_count = (0x8000000 << 4) | buggy_error_count;
  	else
***************
*** 386,388 ****
  	/* Clear bottom checksum bits if v17 would not corrupt this save file */
! 	if (PARG < 4194304) sum &= 0xFFFFFFFE, filesum &= 0xFFFFFFFE;
  	if (filesum != sum) goto err;
--- 386,388 ----
  	/* Clear bottom checksum bits if v17 would not corrupt this save file */
! 	if (PARG < 4194304) sum &= ~1, filesum &= ~1;
  	if (filesum != sum) goto err;
***************
*** 399,401 ****
  
! int getPriorityWork () {
  	unsigned int i;
--- 399,401 ----
  
! int getPriorityWork (void) {
  	unsigned int i;
***************
*** 433,435 ****
  
! void clearRollingStart ()
  {
--- 433,435 ----
  
! void clearRollingStart (void)
  {
***************
*** 441,443 ****
  
! void startRollingAverage ()
  {
--- 441,443 ----
  
! void startRollingAverage (void)
  {
***************
*** 465,467 ****
  
! /* Compute the rolling average where the existing rolling average
  /* accounts for 90% of the new rolling average and the current */
--- 465,467 ----
  
! /* Compute the rolling average where the existing rolling average */
  /* accounts for 90% of the new rolling average and the current */
***************
*** 489,491 ****
  
! void LineFeed ()
  {
--- 489,491 ----
  
! void LineFeed (void)
  {
***************
*** 504,506 ****
  
! void SleepFive ()
  {
--- 504,506 ----
  
! void SleepFive (void)
  {
***************
*** 534,536 ****
  
! void clear_timers () {
  	int	i;
--- 534,536 ----
  
! void clear_timers (void) {
  	int	i;
***************
*** 606,608 ****
  
! int timeCheck ()
  {
--- 606,608 ----
  
! int timeCheck (void)
  {
***************
*** 618,620 ****
  
! void factorSetup ()
  {
--- 618,620 ----
  
! void factorSetup (void)
  {
***************
*** 628,630 ****
  
! void factorDone ()
  {
--- 628,630 ----
  
! void factorDone (void)
  {
***************
*** 654,656 ****
  
! void lucasDone ()
  {
--- 654,656 ----
  
! void lucasDone (void)
  {
***************
*** 668,670 ****
  
! void primeContinue () 
  {
--- 668,670 ----
  
! void primeContinue (void)
  {
***************
*** 673,675 ****
  	char	filename[20];
! 	unsigned int line;
  
--- 673,675 ----
  	char	filename[20];
! 	unsigned int line = 0;
  
***************
*** 798,800 ****
  		char	buf[100];
! 		sprintf (buf, "Error: Work-to-do file contained bad factoring assignment: %ld,%d\n", w.p, w.bits);
  		LogMsg (buf);
--- 798,800 ----
  		char	buf[100];
! 		sprintf (buf, "Error: Work-to-do file contained bad factoring assignment: %ld,%ld\n", w.p, w.bits);
  		LogMsg (buf);
***************
*** 1026,1028 ****
  	unsigned long i, high32, low32;
! 	int	isPrime, rc;
  	char	buf[120];
--- 1026,1028 ----
  	unsigned long i, high32, low32;
! 	int	isMpPrime, rc;
  	char	buf[120];
***************
*** 1068,1070 ****
  	if (counter == 2) {
! 		unsigned long i, word, bit_in_word, hi, lo;
  		srand ((unsigned) time (NULL));
--- 1068,1070 ----
  	if (counter == 2) {
! 		unsigned long j, word, bit_in_word, hi, lo;
  		srand ((unsigned) time (NULL));
***************
*** 1074,1077 ****
  		bitaddr ((units_bit + 2) % p, &word, &bit_in_word);
! 		for (i = 0; i < FFTLEN; i++) {
! 			set_fft_value (LLDATA, i, (i == word) ? (1L << bit_in_word) : 0);
  		}
--- 1074,1077 ----
  		bitaddr ((units_bit + 2) % p, &word, &bit_in_word);
! 		for (j = 0; j < FFTLEN; j++) {
! 			set_fft_value (LLDATA, j, (j == word) ? (1L << bit_in_word) : 0);
  		}
***************
*** 1307,1309 ****
  			char	interimfile[20];
! 			sprintf (interimfile, "%.8s.%03d",
  				 filename, counter / interim);
--- 1307,1309 ----
  			char	interimfile[20];
! 			sprintf (interimfile, "%.8s.%03ld",
  				 filename, counter / interim);
***************
*** 1330,1342 ****
  
! 	for (i = 0, isPrime = 1; isPrime && i < FFTLEN; i++) {
  		long	val;
  		get_fft_value (LLDATA, i, &val);
! 		if (isPrime <= 2 && val == 0)
! 			isPrime = 2;
! 		else if ((isPrime & 1) &&
  			 (val == -1 ||
  			  (p < FFTLEN && !is_big_word (i))))
! 			isPrime = 3;
  		else
! 			isPrime = FALSE;
  	}
--- 1330,1342 ----
  
! 	for (i = 0, isMpPrime = 1; isMpPrime && i < FFTLEN; i++) {
  		long	val;
  		get_fft_value (LLDATA, i, &val);
! 		if (isMpPrime <= 2 && val == 0)
! 			isMpPrime = 2;
! 		else if ((isMpPrime & 1) &&
  			 (val == -1 ||
  			  (p < FFTLEN && !is_big_word (i))))
! 			isMpPrime = 3;
  		else
! 			isMpPrime = FALSE;
  	}
***************
*** 1345,1349 ****
  
! 	if (isPrime) {
  		sprintf (buf, "M%ld is prime! WV%d: %08lX\n",
! 			 p, PORT, SEC1 (p));
  		high32 = low32 = 0;
--- 1345,1349 ----
  
! 	if (isMpPrime) {
  		sprintf (buf, "M%ld is prime! WV%d: %08lX\n",
! 			 p, PORT, (unsigned long)SEC1 (p));
  		high32 = low32 = 0;
***************
*** 1354,1356 ****
  			 p, high32, low32, PORT,
! 			 SEC2 (p, high32, low32, units_bit, error_count),
  			 units_bit, error_count);
--- 1354,1356 ----
  			 p, high32, low32, PORT,
! 			 (unsigned long)SEC2 (p, high32, low32, units_bit, error_count),
  			 units_bit, error_count);
***************
*** 1365,1367 ****
  		pkt.resultType =
! 			isPrime ? PRIMENET_RESULT_PRIME : PRIMENET_RESULT_TEST;
  		sprintf (pkt.resultInfo.residue,
--- 1365,1367 ----
  		pkt.resultType =
! 			isMpPrime ? PRIMENET_RESULT_PRIME : PRIMENET_RESULT_TEST;
  		sprintf (pkt.resultInfo.residue,
***************
*** 1392,1394 ****
  
! 	if (isPrime && !SILENT_VICTORY && !isKnownMersennePrime (p)) {
  		title ("New Prime!!!");
--- 1392,1394 ----
  
! 	if (isMpPrime && !SILENT_VICTORY && !isKnownMersennePrime (p)) {
  		title ("New Prime!!!");
***************
*** 1827,1829 ****
  		unsigned long i, word, bit_in_word;
! 		double	maxsumdiff, maxerr, toterr, M, S;
  /*		unsigned long bins[501]; */
--- 1827,1829 ----
  		unsigned long i, word, bit_in_word;
! 		double	maxsumdiff, maxerr, toterr, M = MAXERR, S = 0.0;
  /*		unsigned long bins[501]; */
***************
*** 1836,1838 ****
  		fscanf (fd, "%lu,%lu,%lu,%lu,%s\n",
! 			&p, &fftlen, &iters, &units_bit, &res);
  		if (p == 0) break;
--- 1836,1838 ----
  		fscanf (fd, "%lu,%lu,%lu,%lu,%s\n",
! 			&p, &fftlen, &iters, &units_bit, res);
  		if (p == 0) break;
***************
*** 1927,1932 ****
  				toterr += MAXERR;
! 				if (i == iters_unchecked + 1) {
! 					M = MAXERR;
! 					S = 0.0;
! 				} else {
  					double	newM;
--- 1927,1929 ----
  				toterr += MAXERR;
! 				if (i > iters_unchecked + 1) {
  					double	newM;
***************
*** 1986,1989 ****
  				char	filename[16];
! 				int	fd;
! 				short	type;
  				unsigned long trash;
--- 1983,1986 ----
  				char	filename[16];
! 				int	fd2;
! 				short	type2;
  				unsigned long trash;
***************
*** 1994,1997 ****
  				dbltogw (0.0, LLDATA); /* clear memory */
! 				if (! readFileHeader (filename, &fd, &type, &trash) ||
! 				    ! readFileData (fd, &trash, &trash))
  					OutputBoth ("Warning: File read failed\n");
--- 1991,1994 ----
  				dbltogw (0.0, LLDATA); /* clear memory */
! 				if (! readFileHeader (filename, &fd2, &type2, &trash) ||
! 				    ! readFileData (fd2, &trash, &trash))
  					OutputBoth ("Warning: File read failed\n");
***************
*** 2022,2024 ****
  
! 		sprintf (buf, "%08X%08X", reshi, reslo);
  		if (stricmp (res, buf)) {
--- 2019,2021 ----
  
! 		sprintf (buf, "%08lX%08lX", reshi, reslo);
  		if (stricmp (res, buf)) {
***************
*** 2030,2032 ****
  
! 		sprintf (buf, "Exp/iters: %lu/%lu, res: %08X%08X, maxerr: %6.6f, maxdiff: %9.9f/%9.9f\n",
  			 p, iters, reshi, reslo, maxerr, maxsumdiff, MAXDIFF);
--- 2027,2029 ----
  
! 		sprintf (buf, "Exp/iters: %lu/%lu, res: %08lX%08lX, maxerr: %6.6f, maxdiff: %9.9f/%9.9f\n",
  			 p, iters, reshi, reslo, maxerr, maxsumdiff, MAXDIFF);
***************
*** 2041,2043 ****
  
! void generateRandomData ()
  {
--- 2038,2040 ----
  
! void generateRandomData (void)
  {
***************
*** 2061,2063 ****
  	char	buf[80];
! 	double	time;
  	int	days, hours, minutes;
--- 2058,2060 ----
  	char	buf[80];
! 	double	timer1;
  	int	days, hours, minutes;
***************
*** 2119,2121 ****
  	lucasDone ();
! 	time = timer_value (1);
  	OutputStr ("Iterations: ");
--- 2116,2118 ----
  	lucasDone ();
! 	timer1 = timer_value (1);
  	OutputStr ("Iterations: ");
***************
*** 2124,2129 ****
  	print_timer (1, TIMER_NL | TIMER_CLR);
! 	time = time * p / iterations;
! 	days = (int) (time / 86400.0); time -= (double) days * 86400.0;
! 	hours = (int) (time / 3600.0); time -= (double) hours * 3600.0;
! 	minutes = (int) (time / 60.0);
  	OutputStr ("Estimated time to complete this exponent: ");
--- 2121,2126 ----
  	print_timer (1, TIMER_NL | TIMER_CLR);
! 	timer1 = timer1 * p / iterations;
! 	days = (int) (timer1 / 86400.0); timer1 -= (double) days * 86400.0;
! 	hours = (int) (timer1 / 3600.0); timer1 -= (double) hours * 3600.0;
! 	minutes = (int) (timer1 / 60.0);
  	OutputStr ("Estimated time to complete this exponent: ");
***************
*** 2341,2343 ****
  		    unsigned long x;
! 		    if (endpthi || endptlo == 0xFFFFFFFF) {
  			    end_bits = 64;
--- 2338,2340 ----
  		    unsigned long x;
! 		    if (endpthi || endptlo == ~(unsigned long)0) {
  			    end_bits = 64;
***************
*** 2538,2540 ****
  		*result = TRUE;
! 		if (FACMSW != 0xFFFFFFFF) {
  			endpthi = FACHSW;
--- 2535,2537 ----
  		*result = TRUE;
! 		if (FACMSW != ~(unsigned long)0) {
  			endpthi = FACHSW;
***************
*** 2576,2578 ****
  		sprintf (buf, "M%ld no factor to 2^%d, WV%d: %08lX\n",
! 			 p, bits, PORT, SEC3 (p));
  		OutputBoth (buf);
--- 2573,2575 ----
  		sprintf (buf, "M%ld no factor to 2^%d, WV%d: %08lX\n",
! 			 p, bits, PORT, (unsigned long)SEC3 (p));
  		OutputBoth (buf);
***************
*** 2719,2721 ****
  				}
! 				if ((testp & 0xFF000000) == 0xFF000000) {
  					base = testp << 8;
--- 2716,2718 ----
  				}
! 				if ((testp & ~(unsigned long)0xFFFFFF) == ~(unsigned long)0xFFFFFF) {
  					base = testp << 8;
***************
*** 2887,2889 ****
  
! 		if (FACMSW != 0xFFFFFFFF) {
  			endpthi = FACHSW;
--- 2884,2886 ----
  
! 		if (FACMSW != ~(unsigned long)0) {
  			endpthi = FACHSW;
===================================================================
RCS file: RCS/commonb.h,v
retrieving revision 1.1
diff -c1 -r1.1 commonb.h
*** commonb.h	1999/10/17 06:42:45	1.1
--- commonb.h	1999/10/17 23:17:33
***************
*** 18,20 ****
  
! void primeContinue ();
  int prime (unsigned long, unsigned long, unsigned long, unsigned long);
--- 18,20 ----
  
! void primeContinue (void);
  int prime (unsigned long, unsigned long, unsigned long, unsigned long);
***************
*** 26,28 ****
  		unsigned short, short, int);
! void primeSieveTest ();
  
--- 26,28 ----
  		unsigned short, short, int);
! void primeSieveTest (void);
  
***************
*** 33,37 ****
  
! void title (char *);
! void flashWindowAndBeep ();
! void SetPriority ();
  int ecm (unsigned long, unsigned long, unsigned long, unsigned long,
--- 33,37 ----
  
! void title (const char *);
! void flashWindowAndBeep (void);
! void SetPriority (void);
  int ecm (unsigned long, unsigned long, unsigned long, unsigned long,
***************
*** 39 ****
--- 39,71 ----
  int pminus1 (unsigned long, unsigned long, unsigned long, int, int);
+ void generateResidue64(unsigned long units_bit, unsigned long *reshi, unsigned long *reslo);
+ int continuationFileExists(char *filename);
+ int writeToFile(char *filename, unsigned long counter, unsigned long units_bit, unsigned long error_count);
+ void writeNewErrorCount(char *filename, unsigned long new_error_count);
+ int readFileData(int fd, unsigned long *units_bit, unsigned long *error_count);
+ void updateRollingAverage(double est);
+ void OutputNum(unsigned long num);
+ double trunc_percent(double percent);
+ void clear_time(int i);
+ void start_timer(int i);
+ void end_timer(int i);
+ void divide_timer(int i, int j);
+ double timer_value(int i);
+ void print_timer(int i, int flags);
+ void clear_timers(void);
+ void clear_timer(int i);
+ void lucasSetup(unsigned long p, unsigned long fftlen);
+ void inc_error_count(int type, unsigned long *error_count);
+ void lucas_fixup(unsigned long *units_bit);
+ int lucas_QA(int type);
+ int factorAndVerify(unsigned long p);
+ double facpct(short pass, unsigned int bits, unsigned long endpthi, unsigned long endptlo);
+ int getPriorityWork(void);
+ void clearRollingStart(void);
+ void startRollingAverage(void);
+ void LineFeed(void);
+ void SleepFive(void);
+ int timeCheck(void);
+ void factorSetup(void);
+ void factorDone(void);
+ void lucasDone(void);
+ void generateRandomData(void);
===================================================================
RCS file: RCS/commonc.c,v
retrieving revision 1.1
diff -c1 -r1.1 commonc.c
*** commonc.c	1999/10/17 06:42:49	1.1
--- commonc.c	1999/10/17 23:17:33
***************
*** 76,84 ****
  
! /* Try pentium-specific instruction (RDTSC) */
  
- #if defined (__linux__) || defined (__EMX__)
  #include <setjmp.h>
  int	boom;
  jmp_buf	env;
! void sigboom_handler(int i)
  {
--- 76,85 ----
  
! #if (defined (__linux__) || defined (__EMX__)) && defined(i386)
  
  #include <setjmp.h>
+ 
  int	boom;
  jmp_buf	env;
! 
! static void sigboom_handler(int i)
  {
***************
*** 87,89 ****
  }
! int isPentium ()
  {
--- 88,93 ----
  }
! 
! /* Try pentium-specific instruction (RDTSC) */
! 
! int isPentium (void)
  {
***************
*** 96,98 ****
--- 100,116 ----
  }
+ 
+ /* Try pentium pro-specific instruction (CMOV) */
+ 
+ int isPentiumPro (void)
+ {
+ 	boom = FALSE;
+ 	(void) signal (SIGILL, sigboom_handler);
+ 	if (setjmp (env) == 0)
+ 		__asm__ __volatile__ (".byte 0x0F\n .byte 0x42\n .byte 0xC0\n");
+ 	(void) signal (SIGILL, SIG_DFL);
+ 	return (!boom);
+ }
+ 
  #elif defined (WIN31)
+ 
  int isPentium ()
***************
*** 101,103 ****
  }
! #else
  int isPentium ()
--- 119,128 ----
  }
! 
! int isPentiumPro ()
! {
! 	return (TRUE);
! }
! 
! #elif defined(i386)
! 
  int isPentium ()
***************
*** 115,137 ****
  }
- #endif
- 
- 
- /* Try pentium pro-specific instruction (CMOV) */
  
- #if defined (__linux__) || defined (__EMX__)
- int isPentiumPro ()
- {
- 	boom = FALSE;
- 	(void) signal (SIGILL, sigboom_handler);
- 	if (setjmp (env) == 0)
- 		__asm__ __volatile__ (".byte 0x0F\n .byte 0x42\n .byte 0xC0\n");
- 	(void) signal (SIGILL, SIG_DFL);
- 	return (!boom);
- }
- #elif defined (WIN31)
- int isPentiumPro ()
- {
- 	return (TRUE);
- }
- #else
  int isPentiumPro ()
--- 140,142 ----
***************
*** 150,151 ****
--- 155,169 ----
  }
+ 
+ #else
+ 
+ int isPentium()
+  {
+   return(FALSE);
+  }
+ 
+ int isPentiumPro()
+  {
+   return(FALSE);
+  }
+ 
  #endif
***************
*** 205,209 ****
  
! void readIniFiles ()
  {
! 	int	change;
  
--- 223,227 ----
  
! void readIniFiles (void)
  {
! 	int	change = FALSE;
  
***************
*** 300,302 ****
  
- 	change = FALSE;
  	if (CPU_TYPE == 0 || CPU_SPEED == 0) guessCpuType (), change = TRUE;
--- 318,319 ----
***************
*** 324,339 ****
  
- struct IniLine {
- 	char	*keyword;
- 	char	*value;
- 	int	active;
- };
- struct IniCache {
- 	char	*filename;
- 	int	immediate_writes;
- 	int	dirty;
- 	unsigned int num_lines;
- 	unsigned int array_size;
- 	struct IniLine **lines;
- };
- 
  void growIniLineArray (
--- 341,342 ----
***************
*** 356,358 ****
  struct IniCache *openIniFile (
! 	char	*filename,
  	int	forced_read)
--- 359,361 ----
  struct IniCache *openIniFile (
! 	const char	*filename,
  	int	forced_read)
***************
*** 662,664 ****
  	unsigned int bufsize,
! 	char	*val)
  {
--- 665,667 ----
  	unsigned int bufsize,
! 	const char	*val)
  {
***************
*** 673,679 ****
  void IniGetString (
! 	char	*filename,
! 	char	*keyword,
  	char	*val,
  	unsigned int val_bufsize,
! 	char	*default_val)
  {
--- 676,682 ----
  void IniGetString (
! 	const char	*filename,
! 	const char	*keyword,
  	char	*val,
  	unsigned int val_bufsize,
! 	const char	*default_val)
  {
***************
*** 708,710 ****
  	char	*filename,
! 	char	*keyword,
  	long	default_val)
--- 711,713 ----
  	char	*filename,
! 	const char	*keyword,
  	long	default_val)
***************
*** 719,722 ****
  	char	*filename,
! 	char	*keyword,
! 	char	*val)
  {
--- 722,725 ----
  	char	*filename,
! 	const char	*keyword,
! 	const char	*val)
  {
***************
*** 784,786 ****
  	char	*filename,
! 	char	*keyword,
  	long	val)
--- 787,789 ----
  	char	*filename,
! 	const char	*keyword,
  	long	val)
***************
*** 887,889 ****
  	unsigned int line,
! 	char	*keyword,
  	char	*val)
--- 890,892 ----
  	unsigned int line,
! 	const char	*keyword,
  	char	*val)
***************
*** 908,910 ****
  	unsigned int line,
! 	char	*keyword,
  	char	*val)
--- 911,913 ----
  	unsigned int line,
! 	const char	*keyword,
  	char	*val)
***************
*** 949,951 ****
  	unsigned int line,
! 	char	*keyword,
  	long	val)
--- 952,954 ----
  	unsigned int line,
! 	const char	*keyword,
  	long	val)
***************
*** 959,961 ****
  	char	*filename,
! 	char	*keyword,
  	char	*val)
--- 962,964 ----
  	char	*filename,
! 	const char	*keyword,
  	char	*val)
***************
*** 1047,1049 ****
  
! void UpdateEndDates ()
  {
--- 1050,1052 ----
  
! void UpdateEndDates (void)
  {
***************
*** 1056,1058 ****
  
! void ConditionallyUpdateEndDates ()
  {
--- 1059,1061 ----
  
! void ConditionallyUpdateEndDates (void)
  {
***************
*** 1267,1269 ****
  	struct primenetResultMessage local_pkt;
! 	short	structSize;
  	int	return_code;
--- 1270,1272 ----
  	struct primenetResultMessage local_pkt;
! 	short	structSize = 0;
  	int	return_code;
***************
*** 1343,1344 ****
--- 1346,1354 ----
  
+         if (structSize == 0)
+          { /* unknown message type */
+           sprintf (buf, "ERROR: unknown message type %hd\n", msgType);
+           LogMsg (buf);
+           return (PRIMENET_ERROR_INVALID_PARAM);
+          }
+ 
  /* Fill in the common header fields */
***************
*** 1477,1482 ****
  
! void spoolExistingResultsFile ()
  {
  	int	i;
! 	char	*filename;
  	char	line[256];
--- 1487,1492 ----
  
! void spoolExistingResultsFile (void)
  {
  	int	i;
! 	const char	*filename = "\0";
  	char	line[256];
***************
*** 1510,1512 ****
  void OutputSomewhere (
! 	char	*buf)
  {
--- 1520,1522 ----
  void OutputSomewhere (
! 	const char	*buf)
  {
***************
*** 1519,1521 ****
  void OutputBoth (
! 	char	*buf)
  {
--- 1529,1531 ----
  void OutputBoth (
! 	const char	*buf)
  {
***************
*** 1528,1530 ****
  void LogMsg (
! 	char	*str)
  {
--- 1538,1540 ----
  void LogMsg (
! 	const char	*str)
  {
***************
*** 1573,1575 ****
  	else {
! 		char	*fullmsg = "Prime.log file full.  Please delete it.\n";
  		OutputStr (fullmsg);
--- 1583,1585 ----
  	else {
! 		const char	*fullmsg = "Prime.log file full.  Please delete it.\n";
  		OutputStr (fullmsg);
***************
*** 1588,1590 ****
  
! short default_work_type ()
  {
--- 1598,1600 ----
  
! short default_work_type (void)
  {
***************
*** 1663,1665 ****
  		w->work_type = WORK_PMINUS1;
! 		sscanf (value, "%ld,%ld,%ld,%ld,%ld",
  			 &w->p, &w->B1, &w->B2, &w->plus1, &w->memory);
--- 1673,1675 ----
  		w->work_type = WORK_PMINUS1;
! 		sscanf (value, "%ld,%ld,%ld,%d,%d",
  			 &w->p, &w->B1, &w->B2, &w->plus1, &w->memory);
***************
*** 1712,1714 ****
  		if (w->work_type == WORK_ECM) {
! 			sprintf (buf, "%lu,%lu,%lu,%lu,%lu,%.0f,%lu,%lu",
  				 w->p, w->B1, w->B2, w->curves_to_do,
--- 1722,1724 ----
  		if (w->work_type == WORK_ECM) {
! 			sprintf (buf, "%lu,%lu,%lu,%lu,%lu,%.0f,%d,%d",
  				 w->p, w->B1, w->B2, w->curves_to_do,
***************
*** 1718,1720 ****
  		} else {
! 			sprintf (buf, "%lu,%lu,%lu,%lu,%lu",
  				 w->p, w->B1, w->B2, w->plus1, w->memory);
--- 1728,1730 ----
  		} else {
! 			sprintf (buf, "%lu,%lu,%lu,%d,%d",
  				 w->p, w->B1, w->B2, w->plus1, w->memory);
***************
*** 1752,1754 ****
  
! 	sprintf (buf, "%ld,%d", w->p, w->bits);
  
--- 1762,1764 ----
  
! 	sprintf (buf, "%ld,%ld", w->p, w->bits);
  
***************
*** 1850,1852 ****
  
! 		if ((p & 0xFF000000) == 0xFF000000) {
  			base = p << 8;
--- 1860,1862 ----
  
! 		if ((p & ~(unsigned long)0xFFFFFF) == ~(unsigned long)0xFFFFFF) {
  			base = p << 8;
***************
*** 1858,1861 ****
  		if (p == 0) continue;
! 		if ((p & 0x80000000) && !dblchk) continue;
! 		if (!(p & 0x80000000) && dblchk) continue;
  		bits = (int) ((p >> 24) & 0x7F);
--- 1868,1871 ----
  		if (p == 0) continue;
! 		if ((p & (0x8000000 << 4)) && !dblchk) continue;
! 		if (!(p & (0x8000000 << 4)) && dblchk) continue;
  		bits = (int) ((p >> 24) & 0x7F);
***************
*** 1956,1958 ****
  			if (_read (fd, &temp, 4) != 4) break;
! 			if ((temp & 0xFF000000) == 0xFF000000) {
  				base = temp << 8;
--- 1966,1968 ----
  			if (_read (fd, &temp, 4) != 4) break;
! 			if ((temp & ~(unsigned long)0xFFFFFF) == ~(unsigned long)0xFFFFFF) {
  				base = temp << 8;
***************
*** 1963,1965 ****
  			_lseek (fd, -4L, SEEK_CUR);
! 			temp = type ? ((type << 24) + (temp & 0x80FFFFFF)) : 0;
  			_write (fd, &temp, 4);
--- 1973,1975 ----
  			_lseek (fd, -4L, SEEK_CUR);
! 			temp = type ? ((type << 24) + (temp & ~(unsigned long)0x7F000000)) : 0;
  			_write (fd, &temp, 4);
***************
*** 1985,1987 ****
  		if (_read (fd, &temp, 4) != 4) break;
! 		if ((temp & 0xFF000000) == 0xFF000000) {
  			base = temp << 8;
--- 1995,1998 ----
  		if (_read (fd, &temp, 4) != 4) break;
! 
! 		if ((temp & ~(unsigned long)0xFFFFFF) == ~(unsigned long)0xFFFFFF) {
  			base = temp << 8;
***************
*** 2006,2008 ****
  
! unsigned long secondsUntilVacationEnds ()
  {
--- 2017,2019 ----
  
! unsigned long secondsUntilVacationEnds (void)
  {
***************
*** 2075,2077 ****
  	double	timing;
! 	double	est;
  
--- 2086,2088 ----
  	double	timing;
! 	double	est = 86400.0;
  
***************
*** 2080,2082 ****
  	if (w->work_type == WORK_ECM || w->work_type == WORK_PMINUS1)
! 		est = 86400.0;
  
--- 2091,2093 ----
  	if (w->work_type == WORK_ECM || w->work_type == WORK_PMINUS1)
! 		return(est = 86400.0);
  
***************
*** 2187,2189 ****
  int fileExists (
! 	char	*filename)
  {
--- 2198,2200 ----
  int fileExists (
! 	const char	*filename)
  {
***************
*** 2216,2218 ****
  int writeResults (
! 	char	*msg)
  {
--- 2227,2229 ----
  int writeResults (
! 	const char	*msg)
  {
***************
*** 2269,2271 ****
  
! int communicateWithServer ()
  {
--- 2280,2282 ----
  
! int communicateWithServer (void)
  {
***************
*** 2287,2289 ****
  	unsigned long vacation_time;
! 	int	rc;
  	int	talked_to_server = 0;
--- 2298,2300 ----
  	unsigned long vacation_time;
! 	int	rc = 0;
  	int	talked_to_server = 0;
***************
*** 2314,2316 ****
  		if (CPU_TYPE >= 5) { rdtsc (&hi,&lo); id += lo; }
! 		sprintf (COMPID, "C%08X", id);
  		IniWriteString (LOCALINI_FILE, "ComputerID", COMPID);
--- 2325,2327 ----
  		if (CPU_TYPE >= 5) { rdtsc (&hi,&lo); id += lo; }
! 		sprintf (COMPID, "C%08lX", id);
  		IniWriteString (LOCALINI_FILE, "ComputerID", COMPID);
===================================================================
RCS file: RCS/commonc.h,v
retrieving revision 1.1
diff -c1 -r1.1 commonc.h
*** commonc.h	1999/10/17 06:51:03	1.1
--- commonc.h	1999/10/17 23:17:33
***************
*** 126,138 ****
  
! int isPentium ();
! int isPentiumPro ();
  int isPrime (unsigned long p);
  
  void nameIniFiles (int named_ini_files);
! void readIniFiles ();
  
! void IniGetString (char *, char *, char *, unsigned int, char *);
! long IniGetInt (char *, char *, long);
! void IniWriteString (char *, char *, char *);
! void IniWriteInt (char *, char *, long);
  
--- 126,153 ----
  
! int isPentium (void);
! int isPentiumPro (void);
  int isPrime (unsigned long p);
  
+ struct IniLine {
+ 	char	*keyword;
+ 	char	*value;
+ 	int	active;
+ };
+ 
+ struct IniCache {
+ 	char	*filename;
+ 	int	immediate_writes;
+ 	int	dirty;
+ 	unsigned int num_lines;
+ 	unsigned int array_size;
+ 	struct IniLine **lines;
+ };
+ 
  void nameIniFiles (int named_ini_files);
! void readIniFiles (void);
  
! void IniGetString (const char *, const char *, char *, unsigned int, const char *);
! long IniGetInt (char *, const char *, long);
! void IniWriteString (char *, const char *, const char *);
! void IniWriteInt (char *, const char *, long);
  
***************
*** 145,151 ****
  void IniGetLineAsInt (char *, unsigned int, char *, unsigned int, long *);
! void IniReplaceLineAsString (char *, unsigned int, char *, char *);
  void IniReplaceLineAsInt (char *, unsigned int, char *, long);
! void IniInsertLineAsString (char *, unsigned int, char *, char *);
! void IniInsertLineAsInt (char *, unsigned int, char *, long);
! void IniAppendLineAsString (char *, char *, char *);
  void IniAppendLineAsInt (char *, char *, long);
--- 160,166 ----
  void IniGetLineAsInt (char *, unsigned int, char *, unsigned int, long *);
! void IniReplaceLineAsString (char *, unsigned int, const char *, char *);
  void IniReplaceLineAsInt (char *, unsigned int, char *, long);
! void IniInsertLineAsString (char *, unsigned int, const char *, char *);
! void IniInsertLineAsInt (char *, unsigned int, const char *, long);
! void IniAppendLineAsString (char *, const char *, char *);
  void IniAppendLineAsInt (char *, char *, long);
***************
*** 154,157 ****
  
! void UpdateEndDates ();
! void ConditionallyUpdateEndDates ();
  void spoolMessage (short, void *);
--- 169,172 ----
  
! void UpdateEndDates (void);
! void ConditionallyUpdateEndDates (void);
  void spoolMessage (short, void *);
***************
*** 159,173 ****
  int sendMessage (short, void *);
! void spoolExistingResultsFile ();
! void OutputBoth (char *);
! void OutputSomewhere (char *);
! void LogMsg (char *);
  
  struct work_unit {
! 	int	work_type;	/* Type of work to do */
  	unsigned long p;	/* Exponent to work on */
! 	unsigned int bits;	/* How far factored */
! 	unsigned int B1;	/* ECM - Bound #1 */
! 	unsigned int B2;	/* ECM - Bound #2 */
! 	unsigned int curves_to_do; /* ECM - curves to try */
! 	unsigned int curves_completed; /* ECM - curves done */
  	double	curve;		/* ECM - Specific curve to test */
--- 174,188 ----
  int sendMessage (short, void *);
! void spoolExistingResultsFile (void);
! void OutputBoth (const char *);
! void OutputSomewhere (const char *);
! void LogMsg (const char *);
  
  struct work_unit {
! 	unsigned long work_type;	/* Type of work to do */
  	unsigned long p;	/* Exponent to work on */
! 	unsigned long bits;	/* How far factored */
! 	unsigned long B1;	/* ECM - Bound #1 */
! 	unsigned long B2;	/* ECM - Bound #2 */
! 	unsigned long curves_to_do; /* ECM - curves to try */
! 	unsigned long curves_completed; /* ECM - curves done */
  	double	curve;		/* ECM - Specific curve to test */
***************
*** 176,178 ****
  };
! short default_work_type ();
  #define WORK_FACTOR		0
--- 191,193 ----
  };
! short default_work_type (void);
  #define WORK_FACTOR		0
***************
*** 191,193 ****
  
! unsigned long secondsUntilVacationEnds ();
  double pct_complete (int, unsigned long, unsigned long *);
--- 206,208 ----
  
! unsigned long secondsUntilVacationEnds (void);
  double pct_complete (int, unsigned long, unsigned long *);
***************
*** 199,205 ****
  void tempFileName (char	*, unsigned long);
! int fileExists (char *);
  int readFileHeader (char *, int *, short *, unsigned long *);
! int writeResults (char	*);
  
! int communicateWithServer ();
  
--- 214,220 ----
  void tempFileName (char	*, unsigned long);
! int fileExists (const char *);
  int readFileHeader (char *, int *, short *, unsigned long *);
! int writeResults (const char	*);
  
! int communicateWithServer (void);
  
***************
*** 207,212 ****
  
! int LoadPrimeNet ();
! void OutputStr (char *);
! void guessCpuType ();
! int escapeCheck ();
  void BroadcastMessage (char *);
--- 222,227 ----
  
! int LoadPrimeNet (void);
! void OutputStr (const char *);
! void guessCpuType (void);
! int escapeCheck (void);
  void BroadcastMessage (char *);
***************
*** 216 ****
--- 231,239 ----
  void BlinkIcon (int);
+ void growIniLineArray (struct IniCache *p);
+ struct IniCache *openIniFile (const char *filename, int forced_read);
+ void writeIniFile (struct IniCache *p);
+ void parseTimeLine (char **line, int *start_day, int *end_day, int *start_time, int *end_time);
+ int analyzeTimeLine (char *line, time_t current_t);
+ void truncated_strcpy (char *buf, unsigned int bufsize, const char *val);
+ int IniFileWritable (char *filename);
+ void hash_packet (short operation, void *pkt);
===================================================================
RCS file: RCS/ecm.c,v
retrieving revision 1.1
diff -c1 -r1.1 ecm.c
*** ecm.c	1999/10/17 06:49:11	1.1
--- ecm.c	1999/10/17 23:17:33
***************
*** 70,72 ****
  
! EXTERNC int egcdhlp ();
  
--- 70,72 ----
  
! EXTERNC int egcdhlp (void);
  
***************
*** 81,83 ****
  gwnum	UVmem = NULL;
! void gwallocUV ()
  {
--- 81,83 ----
  gwnum	UVmem = NULL;
! static void gwallocUV (void)
  {
***************
*** 87,89 ****
  }
! void gwfreeUV ()
  {
--- 87,90 ----
  }
! 
! static void gwfreeUV (void)
  {
***************
*** 95,97 ****
  
! void ecm_setup1 (
  	unsigned long p,
--- 96,98 ----
  
! static void ecm_setup1 (
  	unsigned long p,
***************
*** 108,110 ****
  /* implementation would have the normalize code after each multiplication */
! /* take into account any input arguments that were the result of
  /* unnormalized adds.  This is especially severe in the choose12 code. */
--- 109,111 ----
  /* implementation would have the normalize code after each multiplication */
! /* take into account any input arguments that were the result of */
  /* unnormalized adds.  This is especially severe in the choose12 code. */
***************
*** 121,123 ****
  
! void ecm_setup2 ()
  {
--- 122,124 ----
  
! static void ecm_setup2 (void)
  {
***************
*** 140,142 ****
  
! void ecm_cleanup ()
  {
--- 141,143 ----
  
! static void ecm_cleanup (void)
  {
***************
*** 167,169 ****
  
! void start_sieve (
  	unsigned long start,
--- 168,170 ----
  
! static void start_sieve (
  	unsigned long start,
***************
*** 210,212 ****
  
! unsigned long sieve ()
  {
--- 211,213 ----
  
! static unsigned long sieve (void)
  {
***************
*** 226,228 ****
  	if (si.first_number > si.end) 
! 		return (0xFFFFFFFF);
  
--- 227,229 ----
  	if (si.first_number > si.end) 
! 		return (~(unsigned long)0);
  
***************
*** 249,251 ****
  
! void end_sieve ()
  {
--- 250,252 ----
  
! static void end_sieve (void)
  {
***************
*** 255,259 ****
  
! int relatively_prime (
  	unsigned long i,
! 	unsigned long D)
  {
--- 256,260 ----
  
! static int relatively_prime (
  	unsigned long i,
! 	unsigned long D2)
  {
***************
*** 262,264 ****
  		if (i % f != 0) continue;
! 		if (D % f == 0) return (FALSE);
  		do {
--- 263,265 ----
  		if (i % f != 0) continue;
! 		if (D2 % f == 0) return (FALSE);
  		do {
***************
*** 267,269 ****
  	}
! 	return (i == 1 || D % i != 0);
  }
--- 268,270 ----
  	}
! 	return (i == 1 || D2 % i != 0);
  }
***************
*** 278,280 ****
  
! void ell_dbl (
  	gwnum	x1,
--- 279,281 ----
  
! static void ell_dbl (
  	gwnum	x1,
***************
*** 343,345 ****
  
! void ell_add_special (
  	gwnum 	x1,
--- 344,346 ----
  
! static void ell_add_special (
  	gwnum 	x1,
***************
*** 381,383 ****
  
! void ell_begin_fft (
  	gwnum	x1,
--- 382,384 ----
  
! static void ell_begin_fft (
  	gwnum	x1,
***************
*** 395,397 ****
  
! void ell_dbl_fft (
  	gwnum	x1,
--- 396,398 ----
  
! static void ell_dbl_fft (
  	gwnum	x1,
***************
*** 426,428 ****
  
! void ell_add_fft (
  	gwnum 	x1,
--- 427,429 ----
  
! static void ell_add_fft (
  	gwnum 	x1,
***************
*** 458,460 ****
  
! void ell_add_fft_last (
  	gwnum 	x1,
--- 459,461 ----
  
! static void ell_add_fft_last (
  	gwnum 	x1,
***************
*** 506,508 ****
  
! unsigned long lucas_cost (
  	unsigned long n,
--- 507,509 ----
  
! static unsigned long lucas_cost (
  	unsigned long n,
***************
*** 567,569 ****
  
! void lucas_mul (
  	gwnum	xx,
--- 568,570 ----
  
! static void lucas_mul (
  	gwnum	xx,
***************
*** 676,678 ****
  
! void ell_mul (
  	gwnum	xx,
--- 677,679 ----
  
! static void ell_mul (
  	gwnum	xx,
***************
*** 726,728 ****
  
! void bin_ell_mul (
  	gwnum	xx,
--- 727,729 ----
  
! static void bin_ell_mul (
  	gwnum	xx,
***************
*** 791,793 ****
  
! void divide_helper (
  	unsigned long *u,	/* Number to divide (and return modulo in */
--- 792,794 ----
  
! static void divide_helper (
  	unsigned long *u,	/* Number to divide (and return modulo in */
***************
*** 866,868 ****
  
! int compare (
  	unsigned long *u,
--- 867,869 ----
  
! static int compare (
  	unsigned long *u,
***************
*** 886,888 ****
  
! int bindiv (
  	unsigned long *n,
--- 887,889 ----
  
! static int bindiv (
  	unsigned long *n,
***************
*** 910,912 ****
  
! int setN ()
  {
--- 911,913 ----
  
! static int setN (void)
  {
***************
*** 925,927 ****
  	} else {
! 		for (p = PARG; p >= 32; p -= 32) *outptr++ = 0xFFFFFFFF;
  		*outptr++ = (1L << p) - 1;
--- 926,928 ----
  	} else {
! 		for (p = PARG; p >= 32; p -= 32) *outptr++ = ~(unsigned long)0;
  		*outptr++ = (1L << p) - 1;
***************
*** 939,941 ****
  	gwallocUV ();
! 	while (fscanf (fd, "%s", &buf) != EOF) {
  		char	*bufp;
--- 940,942 ----
  	gwallocUV ();
! 	while (fscanf (fd, "%s", buf) != EOF) {
  		char	*bufp;
***************
*** 946,948 ****
  		if (p < PARG) continue;
! 		fscanf (fd, "%s", &buf);
  		if (buf[1] != 'C') continue;
--- 947,949 ----
  		if (p < PARG) continue;
! 		fscanf (fd, "%s", buf);
  		if (buf[1] != 'C') continue;
***************
*** 992,994 ****
  
! void gwtobinary (
  	gwnum	gg,
--- 993,995 ----
  
! static void gwtobinary (
  	gwnum	gg,
***************
*** 1015,1017 ****
  			*outptr >>= 1;
! 			if (val & 1) *outptr += 0x80000000;
  			val >>= 1;
--- 1016,1018 ----
  			*outptr >>= 1;
! 			if (val & 1) *outptr += (0x8000 << 16);
  			val >>= 1;
***************
*** 1051,1053 ****
  
! void extmul (
  	unsigned long *e1,
--- 1052,1054 ----
  
! static void extmul (
  	unsigned long *e1,
***************
*** 1074,1076 ****
  
! void extsub (
  	unsigned long *e1,
--- 1075,1077 ----
  
! static void extsub (
  	unsigned long *e1,
***************
*** 1102,1104 ****
  
! void extmuladd (
  	unsigned long *e2,
--- 1103,1105 ----
  
! static void extmuladd (
  	unsigned long *e2,
***************
*** 1138,1140 ****
  
! void binarytogw (
  	unsigned long *e1,
--- 1139,1141 ----
  
! static void binarytogw (
  	unsigned long *e1,
***************
*** 1198,1200 ****
  
! void extmmadd (
  	unsigned long *e1,
--- 1199,1201 ----
  
! static void extmmadd (
  	unsigned long *e1,
***************
*** 1248,1250 ****
  
! void extmmsub (
  	unsigned long *e1,
--- 1249,1251 ----
  
! static void extmmsub (
  	unsigned long *e1,
***************
*** 1299,1301 ****
  
! int modinv (
  	gwnum b)
--- 1300,1302 ----
  
! static int modinv (
  	gwnum b)
***************
*** 1428,1430 ****
  
! int grouped_modinv (
  	gwnum	*b,
--- 1429,1431 ----
  
! static int grouped_modinv (
  	gwnum	*b,
***************
*** 1494,1496 ****
  
! void add_to_normalize_pool (
  	gwnum	a,
--- 1495,1497 ----
  
! static void add_to_normalize_pool (
  	gwnum	a,
***************
*** 1587,1589 ****
  
! int normalize_pool ()
  {
--- 1588,1590 ----
  
! static int normalize_pool (void)
  {
***************
*** 1643,1645 ****
  
! int normalize (
  	gwnum	a,
--- 1644,1646 ----
  
! static int normalize (
  	gwnum	a,
***************
*** 1790,1792 ****
  
! int gcd (
  	gwnum	gg)
--- 1791,1793 ----
  
! static int gcd (
  	gwnum	gg)
***************
*** 1808,1810 ****
  */
! void choose12 (
  	gwnum 	x,
--- 1809,1811 ----
  */
! static void choose12 (
  	gwnum 	x,
***************
*** 1869,1871 ****
  
! void curve_start_msg (
  	unsigned long curve,
--- 1870,1872 ----
  
! static void curve_start_msg (
  	unsigned long curve,
***************
*** 1888,1890 ****
  
! void updateIniFile (
  	unsigned long p,
--- 1889,1891 ----
  
! static void updateIniFile (
  	unsigned long p,
***************
*** 1914,1916 ****
  
! void mQ_init (gwnum x, unsigned long m, gwnum Q2Dx)
  {
--- 1915,1917 ----
  
! static void mQ_init (gwnum x, unsigned long m, gwnum Q2Dx)
  {
***************
*** 1943,1945 ****
  }
! int mQ_next (gwnum *retx, gwnum *retz)
  {
--- 1944,1947 ----
  }
! 
! static int mQ_next (gwnum *retx, gwnum *retz)
  {
***************
*** 1985,1987 ****
  }
! void mQ_term ()
  {
--- 1987,1990 ----
  }
! 
! static void mQ_term (void)
  {
***************
*** 1997,1999 ****
  
! int isProbablePrime ()
  {
--- 2000,2002 ----
  
! static int isProbablePrime (void)
  {
***************
*** 2011,2013 ****
  		for (j = 1; j <= Nlen; j++) {
! 			for (c = 0x80000000; c; c >>= 1) {
  				gwsquare (t1);
--- 2014,2016 ----
  		for (j = 1; j <= Nlen; j++) {
! 			for (c = (unsigned long)0x80000000; c; c >>= 1) {
  				gwsquare (t1);
***************
*** 2028,2030 ****
  
! int printFactor ()
  {
--- 2031,2033 ----
  
! static int printFactor (void)
  {
***************
*** 2147,2149 ****
  
! void choose_stage2_plan (
  	unsigned long B,		/* Stage 1 bound */
--- 2150,2152 ----
  
! static void choose_stage2_plan (
  	unsigned long B,		/* Stage 1 bound */
***************
*** 2320,2322 ****
  #define ECM_STAGE2	1
! void ecm_save (
  	char	*filename,
--- 2323,2325 ----
  #define ECM_STAGE2	1
! static void ecm_save (
  	char	*filename,
***************
*** 2416,2418 ****
  
! void ecm_restore (
  	char	*filename,
--- 2419,2421 ----
  
! static void ecm_restore (
  	char	*filename,
***************
*** 2522,2526 ****
  	double	sigma;
! 	unsigned long i, j, m, curve, prime, iters;
  	char	filename[16], buf[100];
! 	int	retval, stage, escaped;
  	long	write_time = DISK_WRITE_TIME * 60;
--- 2525,2529 ----
  	double	sigma;
! 	unsigned long i, j, m, curve, nextPrime, iters;
  	char	filename[16], buf[100];
! 	int	retval = FALSE, stage, escaped;
  	long	write_time = DISK_WRITE_TIME * 60;
***************
*** 2781,2783 ****
  			start_sieve (save_C_processed, C+D+D);
! 			prime = sieve ();
  			goto restart3;
--- 2784,2786 ----
  			start_sieve (save_C_processed, C+D+D);
! 			nextPrime = sieve ();
  			goto restart3;
***************
*** 2823,2838 ****
  	for ( ; ; ) {
! 		prime = sieve ();
! 		if (prime > B) break;
  
! /* Apply as many powers of prime as long as prime^n <= B */
  /* MEMUSED: 3 gwnums (x, z, AD4) + 10 for ell_mul */
  
! 		ell_mul (x, z, prime);
! 		if (prime <= SQRT_B) {
  			unsigned long mult, max;
! 			mult = prime;
! 			max = B / prime;
  			for ( ; ; ) {
! 				ell_mul (x, z, prime);
! 				mult *= prime;
  				if (mult > max) break;
--- 2826,2841 ----
  	for ( ; ; ) {
! 		nextPrime = sieve ();
! 		if (nextPrime > B) break;
  
! /* Apply as many powers of nextPrime as long as nextPrime^n <= B */
  /* MEMUSED: 3 gwnums (x, z, AD4) + 10 for ell_mul */
  
! 		ell_mul (x, z, nextPrime);
! 		if (nextPrime <= SQRT_B) {
  			unsigned long mult, max;
! 			mult = nextPrime;
! 			max = B / nextPrime;
  			for ( ; ; ) {
! 				ell_mul (x, z, nextPrime);
! 				mult *= nextPrime;
  				if (mult > max) break;
***************
*** 2844,2846 ****
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", prime);
  			OutputStr (buf);
--- 2847,2849 ----
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", nextPrime);
  			OutputStr (buf);
***************
*** 2863,2865 ****
  			ecm_save (filename, ECM_STAGE1, curve, sigma,
! 				  B, prime, 0, x, z);
  			if (escaped) {
--- 2866,2868 ----
  			ecm_save (filename, ECM_STAGE1, curve, sigma,
! 				  B, nextPrime, 0, x, z);
  			if (escaped) {
***************
*** 3032,3034 ****
  
! 	m = (prime / D + 1) * D;
  	mQ_init (nQx[0], m, Q2x);
--- 3035,3037 ----
  
! 	m = (nextPrime / D + 1) * D;
  	mQ_init (nQx[0], m, Q2x);
***************
*** 3082,3084 ****
  			ecm_save (filename, ECM_STAGE2, curve, sigma,
! 				  B, B, prime, nQx[0], gg);
  			retval = FALSE;
--- 3085,3087 ----
  			ecm_save (filename, ECM_STAGE2, curve, sigma,
! 				  B, B, nextPrime, nQx[0], gg);
  			retval = FALSE;
***************
*** 3089,3099 ****
  
! /* 2 FFT per prime continuation - deals with all normalized values */
  
  		if (TWO_FFT_STAGE2) {
! 		    for ( ; ; prime = sieve ()) {
! 			if (prime < m) {	/* Do the m-D to m range */
! 				i = (m - prime) >> 1;
  				bitset (pr, i);
! 			} else if (prime < m+D) { /* Do the D to m+D range */
! 				i = (prime - m) >> 1;
  				if (bittst (pr, i)) continue;
--- 3092,3102 ----
  
! /* 2 FFT per nextPrime continuation - deals with all normalized values */
  
  		if (TWO_FFT_STAGE2) {
! 		    for ( ; ; nextPrime = sieve ()) {
! 			if (nextPrime < m) {	/* Do the m-D to m range */
! 				i = (m - nextPrime) >> 1;
  				bitset (pr, i);
! 			} else if (nextPrime < m+D) { /* Do the D to m+D range */
! 				i = (nextPrime - m) >> 1;
  				if (bittst (pr, i)) continue;
***************
*** 3106,3116 ****
  
! /* 4 FFT per prime continuation - deals with only nQx values normalized */
  
  		else {
! 		    for ( ; ; prime = sieve ()) {
! 			if (prime < m) {	/* Do the m-D to m range */
! 				i = (m - prime) >> 1;
  				bitset (pr, i);
! 			} else if (prime < m+D) { /* Do the D to m+D range */
! 				i = (prime - m) >> 1;
  				if (bittst (pr, i)) continue;
--- 3109,3119 ----
  
! /* 4 FFT per nextPrime continuation - deals with only nQx values normalized */
  
  		else {
! 		    for ( ; ; nextPrime = sieve ()) {
! 			if (nextPrime < m) {	/* Do the m-D to m range */
! 				i = (m - nextPrime) >> 1;
  				bitset (pr, i);
! 			} else if (nextPrime < m+D) { /* Do the D to m+D range */
! 				i = (nextPrime - m) >> 1;
  				if (bittst (pr, i)) continue;
***************
*** 3129,3131 ****
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", prime);
  			OutputStr (buf);
--- 3132,3134 ----
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", nextPrime);
  			OutputStr (buf);
***************
*** 3152,3154 ****
  			ecm_save (filename, ECM_STAGE2, curve, sigma,
! 				  B, B, prime, t1, gg);
  			gwfree (t1);
--- 3155,3157 ----
  			ecm_save (filename, ECM_STAGE2, curve, sigma,
! 				  B, B, nextPrime, t1, gg);
  			gwfree (t1);
***************
*** 3276,3278 ****
  
! void pm1_setup1 (
  	unsigned long p,
--- 3279,3281 ----
  
! static void pm1_setup1 (
  	unsigned long p,
***************
*** 3295,3297 ****
  
! void pm1_setup2 ()
  {
--- 3298,3300 ----
  
! static void pm1_setup2 (void)
  {
***************
*** 3307,3309 ****
  
! void pm1_cleanup ()
  {
--- 3310,3312 ----
  
! static void pm1_cleanup (void)
  {
***************
*** 3320,3322 ****
  
! void pm1_mul (
  	gwnum	xx,
--- 3323,3325 ----
  
! static void pm1_mul (
  	gwnum	xx,
***************
*** 3353,3355 ****
  
! void pm1_bigmul (
  	gwnum	xx,
--- 3356,3358 ----
  
! static void pm1_bigmul (
  	gwnum	xx,
***************
*** 3395,3397 ****
  
! void fd_init (
  	unsigned long start,
--- 3398,3400 ----
  
! static void fd_init (
  	unsigned long start,
***************
*** 3446,3448 ****
  
! void fd_next ()
  {
--- 3449,3451 ----
  
! static void fd_next (void)
  {
***************
*** 3458,3460 ****
  
! void fd_term ()
  {
--- 3461,3463 ----
  
! static void fd_term (void)
  {
***************
*** 3472,3474 ****
  #define PM1_DONE	2
! void pm1_save (
  	char	*filename,
--- 3475,3477 ----
  #define PM1_DONE	2
! static void pm1_save (
  	char	*filename,
***************
*** 3567,3569 ****
  
! void pm1_restore (
  	char	*filename,
--- 3570,3572 ----
  
! static void pm1_restore (
  	char	*filename,
***************
*** 3649,3651 ****
  
! void chooseE ()
  {
--- 3652,3654 ----
  
! static void chooseE (void)
  {
***************
*** 3668,3670 ****
  	unsigned long SQRT_B;
! 	unsigned long i, j, m, prime;
  	unsigned long sieve_start, save_B, save_B_processed;
--- 3671,3673 ----
  	unsigned long SQRT_B;
! 	unsigned long i, j, m, nextPrime = 2;
  	unsigned long sieve_start, save_B, save_B_processed;
***************
*** 3812,3814 ****
  			start_sieve (save_C_processed, C+D+D);
! 			prime = sieve ();
  			if (stage == PM1_DONE) dbltogw (1.0, gg);
--- 3815,3817 ----
  			start_sieve (save_C_processed, C+D+D);
! 			nextPrime = sieve ();
  			if (stage == PM1_DONE) dbltogw (1.0, gg);
***************
*** 3843,3858 ****
  	for ( ; ; ) {
! 		prime = sieve ();
! 		if (prime > B) break;
  
! /* Apply as many powers of prime as long as prime^n <= B */
  
! 		if (prime > save_B_processed) pm1_mul (x, prime);
! 		if (prime <= SQRT_B) {
  			unsigned long mult, max;
! 			mult = prime;
! 			max = B / prime;
  			for ( ; ; ) {
! 				mult *= prime;
! 				if (mult > save_B || prime > save_B_processed)
! 					pm1_mul (x, prime);
  				if (mult > max) break;
--- 3846,3861 ----
  	for ( ; ; ) {
! 		nextPrime = sieve ();
! 		if (nextPrime > B) break;
  
! /* Apply as many powers of nextPrime as long as nextPrime^n <= B */
  
! 		if (nextPrime > save_B_processed) pm1_mul (x, nextPrime);
! 		if (nextPrime <= SQRT_B) {
  			unsigned long mult, max;
! 			mult = nextPrime;
! 			max = B / nextPrime;
  			for ( ; ; ) {
! 				mult *= nextPrime;
! 				if (mult > save_B || nextPrime > save_B_processed)
! 					pm1_mul (x, nextPrime);
  				if (mult > max) break;
***************
*** 3864,3866 ****
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", prime);
  			OutputStr (buf);
--- 3867,3869 ----
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", nextPrime);
  			OutputStr (buf);
***************
*** 3881,3883 ****
  		if (escaped || current_time - start_time > write_time) {
! 			pm1_save (filename, PM1_STAGE1, B, prime, 0, x, NULL);
  			if (escaped) {
--- 3884,3886 ----
  		if (escaped || current_time - start_time > write_time) {
! 			pm1_save (filename, PM1_STAGE1, B, nextPrime, 0, x, NULL);
  			if (escaped) {
***************
*** 3956,3958 ****
  			fd_term ();
! 			pm1_save (filename, PM1_STAGE2, B, B, prime, x, gg);
  			retval = FALSE;
--- 3959,3961 ----
  			fd_term ();
! 			pm1_save (filename, PM1_STAGE2, B, B, nextPrime, x, gg);
  			retval = FALSE;
***************
*** 3963,3968 ****
  
! /* Compute m = CEIL(prime/D), the first group we work on in stage 2 */
  /* Initialize for computing successive x^(m^e) */
  
! 	m = (prime / D + 1) * D;
  	fd_init (m, D+D, x);
--- 3966,3971 ----
  
! /* Compute m = CEIL(nextPrime/D), the first group we work on in stage 2 */
  /* Initialize for computing successive x^(m^e) */
  
! 	m = (nextPrime / D + 1) * D;
  	fd_init (m, D+D, x);
***************
*** 3989,3996 ****
  		memset (pr, 0, (D >> 4) + 1);
! 		for ( ; ; prime = sieve ()) {
! 			if (prime < m) {	/* Do the m-D to m range */
! 				i = (m - prime) >> 1;
  				bitset (pr, i);
! 			} else if (prime < m+D) { /* Do the D to m+D range */
! 				i = (prime - m) >> 1;
  				if (bittst (pr, i)) continue;
--- 3992,3999 ----
  		memset (pr, 0, (D >> 4) + 1);
! 		for ( ; ; nextPrime = sieve ()) {
! 			if (nextPrime < m) {	/* Do the m-D to m range */
! 				i = (m - nextPrime) >> 1;
  				bitset (pr, i);
! 			} else if (nextPrime < m+D) { /* Do the D to m+D range */
! 				i = (nextPrime - m) >> 1;
  				if (bittst (pr, i)) continue;
***************
*** 4012,4014 ****
  				pm1_save (filename, PM1_STAGE2,
! 					  B, B, prime, x, gg);
  				if (escaped) {
--- 4015,4017 ----
  				pm1_save (filename, PM1_STAGE2,
! 					  B, B, nextPrime, x, gg);
  				if (escaped) {
***************
*** 4029,4031 ****
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", prime);
  			OutputStr (buf);
--- 4032,4034 ----
  		if (++iters >= ITER_OUTPUT) {
! 			sprintf (buf, "At prime %lu.  Time thusfar ", nextPrime);
  			OutputStr (buf);
===================================================================
RCS file: RCS/giants.c,v
retrieving revision 1.1
diff -c1 -r1.1 giants.c
*** giants.c	1999/10/17 06:42:51	1.1
--- giants.c	1999/10/17 23:17:33
***************
*** 78,80 ****
  double		maxFFTerror;
! static giant	u0=NULL, u1=NULL, v0=NULL, v1=NULL;
  static double	*z1 = NULL,
--- 78,80 ----
  double		maxFFTerror;
! /* static giant	u0=NULL, u1=NULL, v0=NULL, v1=NULL; */
  static double	*z1 = NULL,
***************
*** 92,94 ****
  int		radixdiv(int, int, giant);
! void		columnwrite(FILE *, short *, char *, short, int);
  
--- 92,94 ----
  int		radixdiv(int, int, giant);
! void		columnwrite(FILE *, short *, const char *, short, int);
  
***************
*** 110,112 ****
  void 		FFTmulg(giant y, giant x);
! void 		scramble_real();
  void 		fft_real_to_hermitian(double *z, int n);
--- 110,112 ----
  void 		FFTmulg(giant y, giant x);
! void 		scramble_real(double *x, int n);
  void 		fft_real_to_hermitian(double *z, int n);
***************
*** 545,547 ****
  	short 	*column,
! 	char 	*format,
  	short 	arg,
--- 545,547 ----
  	short 	*column,
! 	const char 	*format,
  	short 	arg,
===================================================================
RCS file: RCS/gwnum.c,v
retrieving revision 1.1
diff -c1 -r1.1 gwnum.c
*** gwnum.c	1999/10/17 06:48:31	1.1
--- gwnum.c	1999/10/17 23:17:33
***************
*** 15,17 ****
  				/* sum of inputs and outputs */
! EXTERNC void (*GWPROCPTRS[11])()={NULL}; /* Ptrs to assembly routines */
  EXTERNC double *NORM_ARRAY1 = NULL; /* Array #1 of normalization mults */
--- 15,17 ----
  				/* sum of inputs and outputs */
! EXTERNC void (*GWPROCPTRS[11])(void)={NULL}; /* Ptrs to assembly routines */
  EXTERNC double *NORM_ARRAY1 = NULL; /* Array #1 of normalization mults */
***************
*** 52,54 ****
  	gwnum_memory = malloc (32 + mem_needed);
! 	SRCARG = (void *) (((unsigned long) gwnum_memory + 31) & 0xFFFFFFE0);
  	gwsetup2 ();
--- 52,54 ----
  	gwnum_memory = malloc (32 + mem_needed);
! 	SRCARG = (void *) (((unsigned long) gwnum_memory + 31) & (0xFFFFFFE << 4));
  	gwsetup2 ();
***************
*** 101,103 ****
  
! void gwdone ()
  {
--- 101,103 ----
  
! void gwdone (void)
  {
***************
*** 117,119 ****
  
! gwnum gwalloc ()
  {
--- 117,119 ----
  
! gwnum gwalloc (void)
  {
***************
*** 144,146 ****
  	if (p == NULL) return (NULL);
! 	q = (char *) (((unsigned long) p + 63) & 0xFFFFFFE0);
  	* (char **) (q - 32) = p;
--- 144,146 ----
  	if (p == NULL) return (NULL);
! 	q = (char *) (((unsigned long) p + 63) & (0xFFFFFFE << 4));
  	* (char **) (q - 32) = p;
***************
*** 169,171 ****
  
! void gwfreeall ()
  {
--- 169,171 ----
  
! void gwfreeall (void)
  {
***************
*** 241,243 ****
  /* that in pass 2 the FFT data (values 0 through 511) comes from the first */
! /* 16 4KB pages (actually the waste bytes make this 17 4KB pages).  Similarly,
  /* the pass 1 data (values 0 up to 65536 stepping by 256) comes from 16 */
--- 241,243 ----
  /* that in pass 2 the FFT data (values 0 through 511) comes from the first */
! /* 16 4KB pages (actually the waste bytes make this 17 4KB pages).  Similarly, */
  /* the pass 1 data (values 0 up to 65536 stepping by 256) comes from 16 */
***************
*** 355,357 ****
  {
! 	unsigned long addr, i1, i2, i3, i4, i5, i6;
  
--- 355,357 ----
  {
! 	unsigned long addr2, i1, i2, i3, i4, i5, i6;
  
***************
*** 360,362 ****
  	if (FFTLEN <= 1024)
! 		addr = i * 8;
  
--- 360,362 ----
  	if (FFTLEN <= 1024)
! 		addr2 = i * 8;
  
***************
*** 366,368 ****
  	else if (FFTLEN <= 8192)
! 		addr = i * 8 + (i >> 9) * 32;
  
--- 366,368 ----
  	else if (FFTLEN <= 8192)
! 		addr2 = i * 8 + (i >> 9) * 32;
  
***************
*** 380,382 ****
  		i3 = i & 63; i >>= 6;			/* Next 6 bits */
! 		addr =  (i1 << 9) + i2 * (4096+32) +
  			(i3 << 3) + i * (17*4096+16*32);
--- 380,382 ----
  		i3 = i & 63; i >>= 6;			/* Next 6 bits */
! 		addr2 =  (i1 << 9) + i2 * (4096+32) +
  			(i3 << 3) + i * (17*4096+16*32);
***************
*** 402,404 ****
  		i6 = i & 7;  i >>= 3;			/* Next 3 bits */
! 		addr =  (i1 << 9) + i2 * (4096+32) +
  			(i3 << 3) + i4 * (17*4096+8*32) +
--- 402,404 ----
  		i6 = i & 7;  i >>= 3;			/* Next 3 bits */
! 		addr2 =  (i1 << 9) + i2 * (4096+32) +
  			(i3 << 3) + i4 * (17*4096+8*32) +
***************
*** 410,412 ****
  
! 	return ((double *) ((unsigned long) g + addr));
  }
--- 410,412 ----
  
! 	return ((double *) ((unsigned long) g + addr2));
  }
===================================================================
RCS file: RCS/gwnum.h,v
retrieving revision 1.1
diff -c1 -r1.1 gwnum.h
*** gwnum.h	1999/10/17 06:49:26	1.1
--- gwnum.h	1999/10/17 23:17:33
***************
*** 35,37 ****
  				/* sum of inputs and outputs */
! EXTERNC void (*GWPROCPTRS[11])();/* Ptrs to assembly routines */
  EXTERNC unsigned long INFP;	/* For assembly language arg passing */
--- 35,37 ----
  				/* sum of inputs and outputs */
! EXTERNC void (*GWPROCPTRS[11])(void);/* Ptrs to assembly routines */
  EXTERNC unsigned long INFP;	/* For assembly language arg passing */
***************
*** 56,61 ****
  void gwsetup (unsigned long, unsigned long, int);
! void gwdone ();
! gwnum gwalloc ();
  void gwfree (gwnum);
! void gwfreeall ();
  void dbltogw (double, gwnum);
--- 56,61 ----
  void gwsetup (unsigned long, unsigned long, int);
! void gwdone (void);
! gwnum gwalloc (void);
  void gwfree (gwnum);
! void gwfreeall (void);
  void dbltogw (double, gwnum);
***************
*** 109,115 ****
  
! EXTERNC unsigned long gwsetup1 ();
! EXTERNC void gwsetup2 ();
! EXTERNC void gwinfo1 ();
! EXTERNC void emulmod ();
! EXTERNC void fpu_init ();
  #define gw_fft()	(*GWPROCPTRS[0])()
--- 109,115 ----
  
! EXTERNC unsigned long gwsetup1 (void);
! EXTERNC void gwsetup2 (void);
! EXTERNC void gwinfo1 (void);
! EXTERNC void emulmod (void);
! EXTERNC void fpu_init (void);
  #define gw_fft()	(*GWPROCPTRS[0])()
***************
*** 163,168 ****
  
! EXTERNC void eaddhlp ();
! EXTERNC void esubhlp ();
! EXTERNC void emuladdhlp ();
! EXTERNC void emulsubhlp ();
  #define addhlp(a)	SRCARG=(void*)a, eaddhlp()
--- 163,168 ----
  
! EXTERNC void eaddhlp (void);
! EXTERNC void esubhlp (void);
! EXTERNC void emuladdhlp (void);
! EXTERNC void emulsubhlp (void);
  #define addhlp(a)	SRCARG=(void*)a, eaddhlp()
***************
*** 174,176 ****
  #define rdtsc(hi,lo) erdtsc(),*(hi)=(unsigned long)DEST2ARG,*(lo)=(unsigned long)DESTARG
! EXTERNC void erdtsc();
  
--- 174,176 ----
  #define rdtsc(hi,lo) erdtsc(),*(hi)=(unsigned long)DEST2ARG,*(lo)=(unsigned long)DESTARG
! EXTERNC void erdtsc(void);
  