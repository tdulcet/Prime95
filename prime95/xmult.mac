; Copyright 2001-2002 - Just For Fun Software, Inc., all rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; These macros take the basic FFT building blocks and build even
; larger building blocks.
;

; *************** macros to expand 4 types of fft macros ******************

;;
;; Generate the 4 types of FFTs for the given run length.
;; The 4 types are:
;;	1) forward FFT,
;;	2) square (forward FFT, multiply, inverse FFT)
;;	3) multiply (forward FFT src1, multiply by src2, inverse FFT)
;;	4) multiply (multiply src1 by src2, inverse FFT)
;;

xfft	MACRO fft_length, p
	type1	fft_length, p, _1
	type2	fft_length, p, _2
	type3	fft_length, p, _3
	type4	fft_length, p, _4
	purge	xfft&fft_length&p
	ENDM

;;
;; Perform an FFT in preparation for a later multiply
;; Do the forward FFT
;;

type1	MACRO fft_length, p, suffix
	PUBLIC	xfft&fft_length&p&suffix
xfft&fft_length&p&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebx, _SRCARG
	sub	ebx, esi
	IF EXPANDING EQ 2
	mov	ffttype, 1
	JMP_X	xfft2a&fft_length&p
	ELSE
	xfft&fft_length&p 1
	ENDIF
	ENDM

;;
;; Square a number mod 2**p-1
;; Do the forward FFT, squaring, and inverse FFT
;;

type2	MACRO fft_length, p, suffix
	PUBLIC	xfft&fft_length&p&suffix
xfft&fft_length&p&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	sub	ebx, ebx
	IF EXPANDING EQ 2
	mov	ffttype, 2
xfft2a&fft_length&p:
	xfft&fft_length&p
	ELSE
	xfft&fft_length&p 2
	ENDIF
	ENDM

;;
;; Multiply two numbers mod 2**p-1.  One of the input numbers (SRCARG) must
;; have already been passed through gw_fft.
;; Do the forward FFT, multiply, and inverse FFT
;;

type3	MACRO fft_length, p, suffix
	PUBLIC	xfft&fft_length&p&suffix
xfft&fft_length&p&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebp, _SRCARG
	sub	ebx, ebx
	sub	ebp, esi
	IF EXPANDING EQ 2
	mov	ffttype, 3
	JMP_X	xfft2a&fft_length&p
	ELSE
	xfft&fft_length&p 3
	ENDIF
	ENDM

;;
;; Multiply two numbers mod 2**p-1.  Both of the input numbers must
;; have already been passed through gw_fft.
;; Do the multiply and inverse FFT
;;

type4	MACRO fft_length, p, suffix
	PUBLIC	xfft&fft_length&p&suffix
xfft&fft_length&p&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebp, _SRCARG
	mov	ebx, _SRC2ARG
	sub	ebp, esi
	sub	ebx, esi
	IF EXPANDING EQ 2
	mov	ffttype, 4
	JMP_X	xfft2a&fft_length&p
	ELSE
	xfft&fft_length&p 4
	ENDIF
	ENDM

; Return from a type 1 FFT - return to caller

xfft_1_ret MACRO
	pop	esi			;; Pop values and return
	pop	edi
	pop	ebx
	pop	ebp
	ret
	ENDM

; Return from a type 2,3, or 4 FFT - jump to the common normalization code
; used in one-pass FFTs only.

xfft_3_ret MACRO
	mov	eax, _NORMRTN
	jmp	eax
	ENDM

;;
;; Common definitions in SSE2 FFTs
;;

XMM_SCD	= 96			;; Sizeof an SSE2 sin/cos table entry
XMM_PMD = 128			;; Sizeof an entry in premultiplier table


;;
;; Cacheline multiples.  In the first pass of SSE2 transforms, how many
;; cache lines should be processed in each loop.  Note that for FFTs 1024K
;; and below, the clm value must be at least 2.
;;

clm		=	4	;; Used for all FFTs <= 256K
clm320K		=	4
clm384K		=	4
clm448K		=	4
clm512K		=	4
clm640K		=	4
clm768K		=	4
clm896K		=	4
clm1024K	=	4
clm1280K	=	2
clm1536K	=	2
clm1792K	=	2
clm2048K	=	2
clm2560K	=	1
clm3072K	=	1
clm3584K	=	1
clm4096K	=	1

;;
;; Common utility macros used in one and two pass SSE2 FFTs
;;

; IDEA!!!
; Replace mulpd XMM_TWO with a PADD integer instruction (operating on the
; exponent).  This has a shorter latency than mulpd and will make other
; mulpd instructions easier to schedule.  Also can be used for scaling
; in normalize routines.  Downside:  the Intel optimization guide suggests
; there may be penalties mixing packed double and integer SSE2 instructions.

multwo	MACRO	r
;PADDB r, XMM_TWO
	mulpd	r, XMM_TWO
	ENDM

mulhalf	MACRO	r
;PADDB r, XMM_TWO
	mulpd	r, XMM_HALF
	ENDM

