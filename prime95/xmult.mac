; Copyright 2001-2003 - Just For Fun Software, Inc., all rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; These macros take the basic FFT building blocks and build even
; larger building blocks.
;

; *************** macros to expand 4 types of fft macros ******************

;;
;; Generate the 4 types of FFTs for the given run length.
;; The 4 types are:
;;	1) forward FFT,
;;	2) square (forward FFT, multiply, inverse FFT)
;;	3) multiply (forward FFT src1, multiply by src2, inverse FFT)
;;	4) multiply (multiply src1 by src2, inverse FFT)
;;

xfft	MACRO fft_length, p
	type1	&fft_length&p, _1
	type2	&fft_length&p, _2
	type3	&fft_length&p, _3
	type4	&fft_length&p, _4
	purge	xfft&fft_length&p
	ENDM

xfftclm	MACRO fft_length, clm, jump_to_common, p
	type1	&fft_length&p, _1, clm, jump_to_common
	type2	&fft_length&p, _2, clm, jump_to_common
	type3	&fft_length&p, _3, clm, jump_to_common
	type4	&fft_length&p, _4, clm, jump_to_common
	ENDM

;;
;; Perform an FFT in preparation for a later multiply
;; Do the forward FFT
;;

type1	MACRO fft_length, suffix, clm, jump_to_common
	PUBLIC	xfft&fft_length&clm&suffix
xfft&fft_length&clm&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebx, _SRCARG
	sub	ebx, esi
	IF EXPANDING GE 2
	mov	ffttype, 1
	JMP_X	xfft2a&fft_length&clm
	ELSE
	xfft&fft_length 1
	ENDIF
	ENDM

;;
;; Square a number mod 2**p-1
;; Do the forward FFT, squaring, and inverse FFT
;;

type2	MACRO fft_length, suffix, clm, jump_to_common
	PUBLIC	xfft&fft_length&clm&suffix
xfft&fft_length&clm&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	sub	ebx, ebx
	IF EXPANDING GE 2
	mov	ffttype, 2
xfft2a&fft_length&clm:
	IF EXPANDING EQ 2
	xfft&fft_length
	ELSE
	xfft&fft_length clm, jump_to_common
	ENDIF
	ELSE
	xfft&fft_length 2
	ENDIF
	ENDM

;;
;; Multiply two numbers mod 2**p-1.  One of the input numbers (SRCARG) must
;; have already been passed through gw_fft.
;; Do the forward FFT, multiply, and inverse FFT
;;

type3	MACRO fft_length, suffix, clm, jump_to_common
	PUBLIC	xfft&fft_length&clm&suffix
xfft&fft_length&clm&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebp, _SRCARG
	sub	ebx, ebx
	sub	ebp, esi
	IF EXPANDING GE 2
	mov	ffttype, 3
	JMP_X	xfft2a&fft_length&clm
	ELSE
	xfft&fft_length 3
	ENDIF
	ENDM

;;
;; Multiply two numbers mod 2**p-1.  Both of the input numbers must
;; have already been passed through gw_fft.
;; Do the multiply and inverse FFT
;;

type4	MACRO fft_length, suffix, clm, jump_to_common
	PUBLIC	xfft&fft_length&clm&suffix
xfft&fft_length&clm&suffix:
	fninit
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, _DESTARG
	mov	ebp, _SRCARG
	mov	ebx, _SRC2ARG
	sub	ebp, esi
	sub	ebx, esi
	IF EXPANDING GE 2
	mov	ffttype, 4
	JMP_X	xfft2a&fft_length&clm
	ELSE
	xfft&fft_length 4
	ENDIF
	ENDM

; Return from a type 1 FFT - return to caller

xfft_1_ret MACRO
	pop	esi			;; Pop values and return
	pop	edi
	pop	ebx
	pop	ebp
	ret
	ENDM

; Return from a type 2,3, or 4 FFT - jump to the common normalization code
; used in one-pass FFTs only.

xfft_3_ret MACRO
	mov	eax, _NORMRTN
	jmp	eax
	ENDM

;;
;; Common definitions in SSE2 FFTs
;;

XMM_SCD	= 96			;; Sizeof an SSE2 sin/cos table entry
XMM_PMD = 128			;; Sizeof an entry in premultiplier table

;;
;; Cacheline multiples.  In SSE2 first pass, how many cache lines should
;; be processed in each loop.  Note that the clm value must be at least 2.
;;

clm = 4				;; Used for all FFTs <= 512K

;;
;; Common utility macros used in one and two pass SSE2 FFTs
;;

multwo	MACRO	r
	mulpd	r, XMM_TWO
	ENDM

mulhalf	MACRO	r
	mulpd	r, XMM_HALF
	ENDM

xtouch	MACRO	addr
	IF PREFETCHING NE 0
	movapd	xmm0, addr
	ENDIF
	ENDM

xprefetcht1 MACRO addr
	IF PREFETCHING NE 0
	prefetcht1 addr
	ENDIF
	ENDM
