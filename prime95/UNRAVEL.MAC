
	OPTION	NOSCOPED

;
; Macros to work around MASM bugs
;

FSIN_X	MACRO
	DB	0D9h, 0FEh
	ENDM
FCOS_X	MACRO
	DB	0D9h, 0FFh
	ENDM

; The SSE2 movsd instruction as opposed to the string mov instruction
; Thanks to a sandpile.org discussion group contributor for this macro

_movsd	MACRO ops:vararg
	LOCAL	x, y
x:	movss &ops
y:	org x
	DB	0F2h
	org y
	ENDM

; Cool macro to execute a statement and a cool macro to not execute
; a statement.  Some macros expect one of these as an argument to
; optionally execute assembly statements.

exec	MACRO ops:vararg
	&ops
	ENDM
noexec	MACRO ops:vararg
	ENDM

no	MACRO ops:vararg
	no&ops
	ENDM
nonoexec MACRO ops:vararg
	&ops
	ENDM

; Macro to flush the P4 trace cache

trace_cache_flush MACRO
	LOCAL	rrr
rrr:	mov	ds:BYTE PTR rrr, 0C6h
	ENDM
;
;
; Call and Jump instructions to make Linux objcopy happy
; Use these for calling or jumping to labels outside the object file
;

CALL_Y	MACRO	DEST
	LOCAL	xxx
	push	OFFSET xxx
	JMP_Y	DEST
xxx:
	ENDM
JMP_Y	MACRO	DEST
	push	OFFSET DEST
	retn
	ENDM

;
; Call and Jump instructions to make Linux objcopy happy
; Use these for calling or jumping to labels in the same object file
;

CALL_X	MACRO	DEST
	LOCAL	xxx
call DEST
;	DB	0E8h
;	DD	OFFSET DEST - OFFSET xxx
;xxx:
	ENDM
JMP_X	MACRO	DEST
jmp DEST
;	LOCAL	xxx
;	DB	0E9h
;	DD	OFFSET DEST - OFFSET xxx
;xxx:
	ENDM

JCOND_X	MACRO	COND, DEST
	LOCAL	xxx
	DB	0Fh
	DB	80h + COND
	DD	OFFSET DEST - OFFSET xxx
xxx:
	ENDM

JE_X	MACRO	DEST
JE DEST
;	JCOND_X	04h, DEST
	ENDM
JZ_X	MACRO	DEST
JZ DEST
;	JCOND_X	04h, DEST
	ENDM
JNE_X	MACRO	DEST
JNE DEST
;	JCOND_X	05h, DEST
	ENDM
JNZ_X	MACRO	DEST
JNZ DEST
;	JCOND_X	05h, DEST
	ENDM
JL_X	MACRO	DEST
JL DEST
;	JCOND_X	0Ch, DEST
	ENDM
JLE_X	MACRO	DEST
JLE DEST
;	JCOND_X	0Eh, DEST
	ENDM
JA_X	MACRO	DEST
JA DEST
;	JCOND_X	07h, DEST
	ENDM
JB_X	MACRO	DEST
JB DEST
;	JCOND_X	02h, DEST
	ENDM
JAE_X	MACRO	DEST
JAE DEST
;	JCOND_X	03h, DEST
	ENDM
JC_X	MACRO	DEST
JC DEST
;	JCOND_X	02h, DEST
	ENDM
JNC_X	MACRO	DEST
JNC DEST
;	JCOND_X	03h, DEST
	ENDM
JS_X	MACRO	DEST
JS DEST
;	JCOND_X	08h, DEST
	ENDM
JNS_X	MACRO	DEST
JNS DEST
;	JCOND_X	09h, DEST
	ENDM
JG_X	MACRO	DEST
JG DEST
;	JCOND_X	0Fh, DEST
	ENDM
JBE_X	MACRO	DEST
JBE DEST
;	JCOND_X	06h, DEST
	ENDM

IFDEF OLDSTUFF

;
; Macros used in unravelling loops
;

loopent	MACRO	y,z		; Create a entry in the loop entry table
	DD	&y&z
	ENDM
looptab	MACRO	y, cnt		; Create the loop entry table
x	=	0
	REPT	cnt
	loopent	y, %x
x	=	x + 1
	ENDM
	ENDM
looplab	MACRO	y,z		; Create a code label in the unravelled loop
&y&z:
	ENDM
loopst	MACRO	y, cnt		; Marks the beginning of the code to unravel
x	=	cnt
	;REPT	cnt
	;looplab y, %x
	ENDM
loopmid	MACRO
x	=	x - 1
	;IF	x EQ 0
	;EXITM
	;ENDIF
	ENDM
loopend	MACRO	y
	;ENDM
	;looplab y, 0
	ENDM

loopjmp	MACRO	jtype, x, y	; Jumps to an entry labelled by looplab
	jtype	&x&y
	ENDM

loopcall MACRO	x, y		; Calls an entry labelled by looplab
	call	&x&y
	ENDM

ENDIF



;;TIMERS EQU 3

clear_timers MACRO
IFDEF TIMERS
	push	eax
	push	ecx
	push	edi
	sub	eax, eax
	mov	ecx, 32
	mov	edi, OFFSET asm_timers
	mov	_COPYZERO, edi		;; Save addr for C code to access
	rep	stosd
	pop	edi
	pop	ecx
	pop	eax
ENDIF
	ENDM

start_timer MACRO n
IFDEF TIMERS
	push	eax
	push	edx
	rdtsc
	sub	asm_timers[n*4], eax
	pop	edx
	pop	eax
ENDIF
	ENDM

end_timer MACRO n
IFDEF TIMERS
	push	eax
	push	edx
	rdtsc
	add	asm_timers[n*4], eax
	pop	edx
	pop	eax
ENDIF
	ENDM
