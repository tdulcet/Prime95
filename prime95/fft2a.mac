; Copyright 1998-2000 - Just For Fun Software, Inc., all rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; These macros take the basic FFT building blocks and build even
; larger building blocks.
;

; ********************************************************
; ********************************************************
; ********************  FFT MACROS  **********************
; ********************************************************
; ********************************************************

;; Perform a 1280-element FFT.  This is done in two passes.  The first
;; pass does 5 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 20 values at the same time.

fft1280 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 20 values to work on.
;; Each loop iteration does 4 sets of 20 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 4 five_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	mov	al, 4			;; U - 4 iterations of 4
b2b:	disp five_reals_first_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 1 four_reals_fft operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;; However, for better pipelining we merge two four_reals_fft operations
;; into a single two_four_reals_fft macro that operates on two
;; independent sets of 4 data values.  We can do this since we are
;; operating on 4 different sets of 20 values at once.

	lea	esi, [esi-256*dist1]	;; U - Load source pointer
b3b:	disp two_four_reals_fft, dist1, 64*dist1, 128*dist1
	lea	esi, [esi+2*dist1]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	b3b			;;*V - Iterate if necessary

;; Do 2 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 2 iterations

	lea	esi, [esi-4*dist1+256*dist1];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 2			;; V - 2 iterations of 4
b4b:	disp four_complex_fft, 64*dist1, 128*dist1, (dist512-256*dist1)
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Point to next 4 sets of 20 values

	lea	esi, [esi-2*dist512-256*dist1+4*dist1];; U - Next src pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 9 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 20 values to work on.
;; Each loop iteration does 4 sets of 20 values, so
;; we only loop 16 times.

	IF type EQ 4
end1280:lea	esi, [esi-2*dist512-256*dist1];; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 four_reals_unfft operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;; However, for better pipelining we merge two four_reals_unfft operations
;; into a single two_four_reals_unfft macro that operates on two
;; independent sets of 4 data values.  We can do this since we are
;; operating on 4 different sets of 20 values at once.

c3b:	disp two_four_reals_unfft, dist1, 64*dist1, 128*dist1
	lea	esi, [esi+2*dist1]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	c3b			;;*V - Iterate if necessary

;; Do 2 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 2 iterations

	lea	esi, [esi-4*dist1+256*dist1];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 2			;; V - 2 iterations of 4
c4b:	disp four_complex_unfft, 64*dist1, 128*dist1, (dist512-256*dist1)
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 4 five_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	lea	esi, [esi-2*dist512-256*dist1];; U - Load source pointer
	mov	al, 4			;; U - 4 iterations of 4
c2b:	disp five_reals_last_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 20 values

	lea	esi, [esi-256*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 1536-element FFT.  This is done in two passes.  The first
;; pass does 5 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 24 values at the same time.

fft1536 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 24 values to work on.
;; Each loop iteration does 4 sets of 24 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 4 six_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	mov	al, 4			;; U - 4 iterations of 4
b2b:	disp six_reals_first_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 1 eight_reals_fft_2 operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-256*dist1]	;; U - Load source pointer
b3b:	disp eight_reals_fft_2, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b3b			;;*V - Iterate if necessary

;; Do 2 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 2 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 2			;; V - 2 iterations of 4
b4b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Point to next 4 sets of 24 values

	lea	esi, [esi-3*dist512+4*dist1];; U - Next src pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 11 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 24 values to work on.
;; Each loop iteration does 4 sets of 24 values, so
;; we only loop 16 times.

	IF type EQ 4
end1536:lea	esi, [esi-3*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_2 operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64

c3b:	disp eight_reals_unfft_2, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c3b			;;*V - Iterate if necessary

;; Do 2 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 2 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 2			;; V - 2 iterations of 4
c4b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 4 six_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	lea	esi, [esi-3*dist512]	;; U - Load source pointer
	mov	al, 4			;; U - 4 iterations of 4
c2b:	disp six_reals_last_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 24 values

	lea	esi, [esi-256*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 1792-element FFT.  This is done in two passes.  The first
;; pass does 5 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 28 values at the same time.

fft1792 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 28 values to work on.
;; Each loop iteration does 4 sets of 28 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 4 seven_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	mov	al, 4			;; U - 4 iterations of 4
b2b:	disp seven_reals_first_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 1 four_reals_fft operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;; However, for better pipelining we merge two four_reals_fft operations
;; into a single two_four_reals_fft macro that operates on two
;; independent sets of 4 data values.  We can do this since we are
;; operating on 4 different sets of 28 values at once.

	lea	esi, [esi-256*dist1]	;; U - Load source pointer
b3b:	disp two_four_reals_fft, dist1, 64*dist1, 128*dist1
	lea	esi, [esi+2*dist1]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	b3b			;;*V - Iterate if necessary

;; Do 3 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 3 iterations

	lea	esi, [esi-4*dist1+256*dist1];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 3			;; V - 3 iterations of 4
b4b:	disp four_complex_fft, 64*dist1, 128*dist1, (dist512-256*dist1)
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Point to next 4 sets of 28 values

	lea	esi, [esi-3*dist512-256*dist1+4*dist1];; U - Next src pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 13 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 28 values to work on.
;; Each loop iteration does 4 sets of 28 values, so
;; we only loop 16 times.

	IF type EQ 4
end1792:lea	esi, [esi-3*dist512-256*dist1];; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 four_reals_unfft operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;; However, for better pipelining we merge two four_reals_unfft operations
;; into a single two_four_reals_unfft macro that operates on two
;; independent sets of 4 data values.  We can do this since we are
;; operating on 4 different sets of 28 values at once.

c3b:	disp two_four_reals_unfft, dist1, 64*dist1, 128*dist1
	lea	esi, [esi+2*dist1]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	c3b			;;*V - Iterate if necessary

;; Do 3 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 3 iterations

	lea	esi, [esi-4*dist1+256*dist1];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	al, 3			;; V - 3 iterations of 4
c4b:	disp four_complex_unfft, 64*dist1, 128*dist1, (dist512-256*dist1)
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 4 seven_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	lea	esi, [esi-3*dist512-256*dist1];; U - Load source pointer
	mov	al, 4			;; U - 4 iterations of 4
c2b:	disp seven_reals_last_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 28 values

	lea	esi, [esi-256*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 2048-element FFT.  This is done in two passes.  The first
;; pass does 5 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 32 values at the same time.

fft2048 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 32 values to work on.
;; Each loop iteration does 4 sets of 32 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 4 eight_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	mov	al, 4			;; U - 4 iterations of 4
b2b:	disp eight_reals_first_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 1 eight_reals_fft_2 operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-256*dist1]	;; U - Load source pointer
b3b:	disp eight_reals_fft_2, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b3b			;;*V - Iterate if necessary

;; Do 3 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 3 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	al, 3			;; V - 3 iterations of 4
b4b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Point to next 4 sets of 32 values

	lea	esi, [esi-4*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 15 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 32 values to work on.
;; Each loop iteration does 4 sets of 32 values, so
;; we only loop 16 times.

	IF type EQ 4
end2048:lea	esi, [esi-4*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_2 operations (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64

c3b:	disp eight_reals_unfft_2, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c3b			;;*V - Iterate if necessary

;; Do 3 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 1 * 64
;;	do 3 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	al, 3			;; V - 3 iterations of 4
c4b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 4 eight_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist512]	;; U - Load source pointer
	mov	al, 4			;; U - 4 iterations of 4
c2b:	disp eight_reals_last_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 32 values

	lea	esi, [esi-256*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 2048-element FFT using mod 2^N+1 arithmetic.
;; This is done in two passes.  The first pass does 4 levels,
;; working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.

fft2048p MACRO type
	LOCAL	b1b, b2b, b3b, c1b, c2b, c3b

;; In pass 1 there are 64 sets of 32 values to work on.

	IF type NE 4
	mov	dl, 64			;; U - 64 iterations
	mov	ecx, plus1_premults	;; V - Address of the multipliers
b1b:

;; Do 4 four_complex_fft macros (FFT levels 1,2)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	mov	edi, ecx		;; U - Address of premultipliers
	mov	al, 4			;; V - 4 iterations
b2b:	disp four_complex_first_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	dec	al			;; U - Test loop counter
	JNZ_X	b2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Do 4 four_complex_fft macros (FFT levels 3,4)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	lea	esi, [esi-256*dist1]	;; U - Next source pointer
	mov	edi, sincos_complex	;; U - Load sin/cos pointer
b3b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	add	al, 256/4		;; U - Test loop counter
	JNC_X	b3b			;; V - Iterate if necessary

;; Point to next set of 32 values

	lea	esi, [esi-4*dist512+dist1];; U - Next source pointer
	dec	dl			;; V - Test counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 16 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123p
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4p
	ENDIF

;; In pass 1 there are 64 sets of 32 values to work on.

	IF type EQ 4
end2048p:lea	esi, [esi-4*dist512]	;; U - Restore source pointer
	mov	ecx, plus1_premults	;; V - Address of the multipliers
	mov	dl, 64			;; V - 64 iterations
c1b:

;; Do 4 four_complex_unfft macros (FFT levels 3,4)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	mov	edi, sincos_complex	;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations
c3b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 4 four_complex_unfft macros (FFT levels 1,2)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist512]	;; U - Load source pointer
	mov	edi, ecx		;; V - Address of premultipliers
c2b:	disp four_complex_last_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	add	al, 256/4		;; U - Test loop counter
	JNC_X	c2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Point to next set of 32 values

	lea	esi, [esi-256*dist1+dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 2560-element FFT.  This is done in two passes.  The first
;; pass does 6 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft2560 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b, c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 40 values to work on.
;; Each loop iteration does 4 sets of 40 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 8 five_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	mov	al, 8			;; U - 8 iterations of 4
b2b:	disp five_reals_first_fft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 4 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 2 iterations of 2

	lea	esi, [esi-512*dist1+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 2 of 4
b3b:	disp four_complex_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-5*dist512]	;; U - Load source pointer
b4b:	disp eight_reals_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b4b			;;*V - Iterate if necessary

;; Do 8 two_complex_fft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations of 4
b6b:	disp two_two_complex_fft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 40 values

	lea	esi, [esi-5*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 19 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 48 values to work on.
;; Each loop iteration does 4 sets of 48 values, so
;; we only loop 16 times.

	IF type EQ 4
end2560:lea	esi, [esi-5*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64

c4b:	disp eight_reals_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c4b			;;*V - Iterate if necessary

;; Do 8 two_complex_unfft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations of 4
c6b:	disp two_two_complex_unfft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 4 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 2 iterations of 2

	lea	esi, [esi-5*dist512+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 2 of 4
c3b:	disp four_complex_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 8 five_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	lea	esi, [esi-5*dist512]	;; U - Load source pointer
	mov	al, 8			;; U - 8 iterations of 4
c2b:	disp five_reals_last_unfft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 40 values

	lea	esi, [esi-512*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 3072-element FFT.  This is done in two passes.  The first
;; pass does 6 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft3072 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b6b, c1b, c2b, c3b, c4b, c6b

;; In pass 1 there are 64 sets of 48 values to work on.
;; Each loop iteration does 4 sets of 48 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 8 six_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	mov	al, 8			;; U - 8 iterations of 4
b2b:	disp six_reals_first_fft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 4 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 2 iterations of 2

	lea	esi, [esi-512*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 2 of 4
b3b:	disp four_complex_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64
;; Do nothing (FFT level 4)
;; This will turn these 8 real values into 4 complex values.
;; Do 1 four_complex_fft operations (FFT levels 5,6)
;; Distance between fft data elements is 1 * 64

	lea	esi, [esi-6*dist512]	;; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
b4b:	disp eight_reals_fft, 64*dist1, 128*dist1, 256*dist1
	dispc four_complex_fft_2, 64*dist1, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b4b			;;*V - Iterate if necessary

;; Do 8 two_complex_fft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist1+2*dist512];; U - Load source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	mov	al, 4			;; V - 4 iterations of 4
b6b:	disp two_two_complex_fft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 48 values

	lea	esi, [esi-6*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 23 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 48 values to work on.
;; Each loop iteration does 4 sets of 48 values, so
;; we only loop 16 times.

	IF type EQ 4
end3072:lea	esi, [esi-6*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64
;; Do nothing (FFT level 4)
;; This will turn these 4 complex values into 8 real values.
;; Do 1 four_complex_unfft operations (FFT levels 5,6)
;; Distance between fft data elements is 1 * 64

	mov	edi, sincos2		;; U - Load sin/cos pointer
c4b:	disp eight_reals_unfft, 64*dist1, 128*dist1, 256*dist1
	dispc four_complex_unfft_2, 64*dist1, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c4b			;;*V - Iterate if necessary

;; Do 8 two_complex_unfft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 4 iterations

	lea	esi, [esi-4*dist1+2*dist512];; U - Load source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	mov	al, 4			;; V - 4 iterations of 4
c6b:	disp two_two_complex_unfft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 4 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 2 iterations of 2

	lea	esi, [esi-6*dist512+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 2 of 4
c3b:	disp four_complex_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 8 six_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	lea	esi, [esi-6*dist512]	;; U - Load source pointer
	mov	al, 8			;; U - 8 iterations of 4
c2b:	disp six_reals_last_unfft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 48 values

	lea	esi, [esi-512*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 3584-element FFT.  This is done in two passes.  The first
;; pass does 6 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft3584 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b, c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 56 values to work on.
;; Each loop iteration does 4 sets of 56 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 8 seven_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	mov	al, 8			;; U - 8 iterations of 4
b2b:	disp seven_reals_first_fft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 6 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 3 iterations of 2

	lea	esi, [esi-512*dist1+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 2 of 4
b3b:	disp four_complex_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-7*dist512]	;; U - Load source pointer
b4b:	disp eight_reals_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b4b			;;*V - Iterate if necessary

;; Do 12 two_complex_fft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 6 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 6			;; V - 6 iterations of 4
b6b:	disp two_two_complex_fft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 56 values

	lea	esi, [esi-7*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 27 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 56 values to work on.
;; Each loop iteration does 4 sets of 56 values, so
;; we only loop 16 times.

	IF type EQ 4
end3584:lea	esi, [esi-7*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64

c4b:	disp eight_reals_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c4b			;;*V - Iterate if necessary

;; Do 12 two_complex_unfft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 6 iterations

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 6			;; V - 6 iterations of 4
c6b:	disp two_two_complex_unfft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 6 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 3 iterations of 2

	lea	esi, [esi-7*dist512+dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 2 of 4
c3b:	disp four_complex_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 8 seven_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	lea	esi, [esi-7*dist512]	;; U - Load source pointer
	mov	al, 8			;; U - 8 iterations of 4
c2b:	disp seven_reals_last_unfft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 56 values

	lea	esi, [esi-512*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 4096-element FFT.  This is done in two passes.  The first
;; pass does 6 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft4096 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b6b, c1b, c2b, c3b, c4b, c6b

;; In pass 1 there are 64 sets of 64 values to work on.
;; Each loop iteration does 4 sets of 64 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 8 eight_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	mov	al, 8			;; U - 8 iterations of 4
b2b:	disp eight_reals_first_fft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 6 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 3 iterations of 2

	lea	esi, [esi-512*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 2 of 4
b3b:	disp four_complex_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64
;; Do nothing (FFT level 4)
;; This will turn these 8 real values into 4 complex values.
;; Do 1 four_complex_fft operations (FFT levels 5,6)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-8*dist512]	;; U - Load source pointer
	mov	edi, sincos_real	;; V - Load sin/cos pointer
b4b:	disp eight_reals_fft, 64*dist1, 128*dist1, 256*dist1
	dispc four_complex_fft_2, 64*dist1, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b4b			;;*V - Iterate if necessary

;; Do 12 two_complex_fft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 6 iterations

	lea	esi, [esi-4*dist1+2*dist512];; U - Load source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	mov	al, 6			;; V - 6 iterations of 4
b6b:	disp two_two_complex_fft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 64 values

	lea	esi, [esi-8*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 31 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 64 values to work on.
;; Each loop iteration does 4 sets of 64 values, so
;; we only loop 16 times.

	IF type EQ 4
end4096:lea	esi, [esi-8*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft operations (FFT levels 4,5,6)
;;	distance between fft data elements is 1 * 64
;; Do nothing (FFT level 4)
;; This will turn these 4 complex values into 8 real values.
;; Do 1 four_complex_unfft operations (FFT levels 5,6)
;;	distance between fft data elements is 1 * 64

	mov	edi, sincos_real	;; U - Load sin/cos pointer
c4b:	disp eight_reals_unfft, 64*dist1, 128*dist1, 256*dist1
	dispc four_complex_unfft_2, 64*dist1, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c4b			;;*V - Iterate if necessary

;; Do 12 two_complex_unfft macros (FFT levels 6)
;;	distance between fft data elements is 1 * 64
;;	do 6 iterations

	lea	esi, [esi-4*dist1+2*dist512];; U - Load source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	mov	al, 6			;; V - 6 iterations of 4
c6b:	disp two_two_complex_unfft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 6 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 2 * 64
;;	do 3 iterations of 2

	lea	esi, [esi-8*dist512+2*dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 2 of 4
c3b:	disp four_complex_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/2		;; V - Test middle loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 8 eight_reals_last_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	lea	esi, [esi-8*dist512]	;; U - Load source pointer
	mov	al, 8			;; U - 8 iterations of 4
c2b:	disp eight_reals_last_unfft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 64 values

	lea	esi, [esi-512*dist1+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 4096-element FFT using mod 2^N+1 arithmetic.
;; This is done in two passes.  The first pass does 5 levels,
;; working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.

fft4096p MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 64 values to work on.

	IF type NE 4
	mov	dl, 64			;; U - 64 iterations
	mov	ecx, plus1_premults	;; V - Address of the multipliers
b1b:

;; Do 8 four_complex_fft macros (FFT levels 1,2)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	mov	edi, ecx		;; U - Address of premultipliers
	mov	al, 8			;; V - 8 iterations
b2b:	disp four_complex_first_fft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	dec	al			;; U - Test loop counter
	JNZ_X	b2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Do 8 four_complex_fft macros (FFT levels 3,4)
;;	distance between fft data elements is 2 * 64
;;	do 4 iterations of 2

	lea	esi, [esi-512*dist1]	;; U - Next source pointer
	mov	edi, sincos_complex	;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations of 2
b3b:	disp four_complex_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	add	al, 256/2		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 8 two_two_complex_fft macros (FFT levels 5)
;;	distance between fft data elements is 1 * 64
;;	do 8 iterations

	lea	esi, [esi-8*dist512]	;; U - Next source pointer
	mov	edi, sincos_complex	;; V - Load sin/cos pointer
b4b:	disp two_two_complex_fft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	add	al, 256/8		;; U - Test loop counter
	JNC_X	b4b			;; V - Iterate if necessary

;; Point to next set of 64 values

	lea	esi, [esi-8*dist512+dist1];; U - Next source pointer
	dec	dl			;; V - Test counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 32 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123p
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4p
	ENDIF

;; In pass 1 there are 64 sets of 64 values to work on.

	IF type EQ 4
end4096p:lea	esi, [esi-8*dist512]	;; U - Restore source pointer
	mov	ecx, plus1_premults	;; V - Address of the multipliers
	mov	dl, 64			;; V - 64 iterations
c1b:

;; Do 8 two_two_complex_unfft macros (FFT levels 5)
;;	distance between fft data elements is 1 * 64
;;	do 8 iterations

	mov	edi, sincos_complex	;; U - Load sin/cos pointer
c4b:	disp two_two_complex_unfft_n, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	add	al, 256/8		;; U - Test loop counter
	JNC_X	c4b			;; V - Iterate if necessary

;; Do 8 four_complex_unfft macros (FFT levels 3,4)
;;	distance between fft data elements is 2 * 64
;;	do 4 iterations of 2

	lea	esi, [esi-8*dist512]	;; U - Next source pointer
	mov	edi, sincos_complex	;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations of 2
c3b:	disp four_complex_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	add	al, 256/2		;; U - Test inner loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-128*dist1+2*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 8 four_complex_unfft macros (FFT levels 1,2)
;;	distance between fft data elements is 8 * 64
;;	do 8 iterations

	lea	esi, [esi-8*dist512]	;; U - Load source pointer
	mov	edi, ecx		;; V - Address of premultipliers
c2b:	disp four_complex_last_unfft, dist512, 2*dist512, 4*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	add	al, 256/8		;; U - Test loop counter
	JNC_X	c2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Point to next set of 64 values

	lea	esi, [esi-512*dist1+dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM


;; Perform a 5120-element FFT.  This is done in two passes.  The first
;; pass does 7 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft5120 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b
	LOCAL	c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 80 values to work on.
;; Each loop iteration does 4 sets of 80 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 16 five_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	mov	eax, 2			;; U - 2 iterations of 8
b2b:	disp five_reals_first_fft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 2 eight_reals_fft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

	lea	esi, [esi-2*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
b3b:	disp eight_reals_funny_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;;*V - Iterate if necessary

;; Do 8 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 2 iterations of 4

	lea	esi, [esi-128*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 4
b4b:	disp four_complex_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-10*dist512]	;; U - Load source pointer
b5b:	disp eight_reals_fft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b5b			;;*V - Iterate if necessary

;; Do 9 four_complex_fft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 9			;; U - 9 iterations
b6b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 80 values

	lea	esi, [esi-10*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 39 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 80 values to work on.
;; Each loop iteration does 4 sets of 80 values, so
;; we only loop 16 times.

	IF type EQ 4
end5120:lea	esi, [esi-10*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

c5b:	disp eight_reals_unfft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c5b			;;*V - Iterate if necessary

;; Do 9 four_complex_unfft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 9			;; U - 9 iterations
c6b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 2 eight_reals_unfft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

	lea	esi, [esi-10*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
c3b:	disp eight_reals_funny_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;;*V - Iterate if necessary

;; Do 8 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 2 iterations of 4

	lea	esi, [esi-128*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 4
c4b:	disp four_complex_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 16 five_reals_first_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	lea	esi, [esi-10*dist512]	;; U - Load source pointer
	mov	eax, 2			;; V - 2 iterations of 8
c2b:	disp five_reals_last_unfft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 80 values

	lea	esi, [esi-2*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM

;; Perform a 6144-element FFT.  This is done in two passes.  The first
;; pass does 7 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft6144 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b
	LOCAL	c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 96 values to work on.
;; Each loop iteration does 4 sets of 96 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 16 six_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	mov	eax, 2			;; U - 2 iterations of 8
b2b:	disp six_reals_first_fft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 2 eight_reals_fft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

;; Do nothing (FFT level 4)
;; This will turn these 16 real values into 8 complex values.
;; Do 4 two_complex_fft operations (FFT levels 5)
;; Distance between fft data elements is 4 * 64
;; However, for better pipelining we merge two two_complex_fft operations
;; into a single two_two_complex_fft macro that operates on two
;; independent sets of 4 data values.
;;	do 2 iterations

	lea	esi, [esi-2*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
b3b:	disp eight_reals_funny_fft, 128*dist1, 256*dist1, dist512
	dispc two_two_complex_fft_2, 128*dist1, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;;*V - Iterate if necessary

;; Do 8 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 2 iterations of 4

	lea	esi, [esi-128*dist1+4*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 4
b4b:	disp four_complex_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-12*dist512]	;; U - Load source pointer
b5b:	disp eight_reals_fft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b5b			;;*V - Iterate if necessary

;; Do 11 four_complex_fft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 11			;; U - 11 iterations
b6b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 96 values

	lea	esi, [esi-12*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 47 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 96 values to work on.
;; Each loop iteration does 4 sets of 96 values, so
;; we only loop 16 times.

	IF type EQ 4
end6144:lea	esi, [esi-12*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

c5b:	disp eight_reals_unfft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c5b			;;*V - Iterate if necessary

;; Do 11 four_complex_unfft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 11			;; U - 11 iterations
c6b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 2 eight_reals_unfft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

;; Do nothing (FFT level 4)
;; This will turn these 16 real values into 8 complex values.
;; Do 4 two_complex_unfft operations (FFT levels 5)
;; Distance between fft data elements is 4 * 64
;; However, for better pipelining we merge two two_complex_unfft operations
;; into a single two_two_complex_unfft macro that operates on two
;; independent sets of 4 data values.
;;	do 2 iterations

	lea	esi, [esi-12*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
c3b:	disp eight_reals_funny_unfft, 128*dist1, 256*dist1, dist512
	dispc two_two_complex_unfft_2, 128*dist1, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;;*V - Iterate if necessary

;; Do 8 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 2 iterations of 4

	lea	esi, [esi-128*dist1+4*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 2			;; V - 2 iterations of 4
c4b:	disp four_complex_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 16 six_reals_first_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	lea	esi, [esi-12*dist512]	;; U - Load source pointer
	mov	eax, 2			;; V - 2 iterations of 8
c2b:	disp six_reals_last_unfft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 96 values

	lea	esi, [esi-2*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM

;; Perform a 7168-element FFT.  This is done in two passes.  The first
;; pass does 7 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft7168 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b
	LOCAL	c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 112 values to work on.
;; Each loop iteration does 4 sets of 112 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 16 seven_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	mov	eax, 2			;; U - 2 iterations of 8
b2b:	disp seven_reals_first_fft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 2 eight_reals_fft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

	lea	esi, [esi-2*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
b3b:	disp eight_reals_funny_fft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;;*V - Iterate if necessary

;; Do 12 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 3 iterations of 4

	lea	esi, [esi-128*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 4
b4b:	disp four_complex_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-14*dist512]	;; U - Load source pointer
b5b:	disp eight_reals_fft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b5b			;;*V - Iterate if necessary

;; Do 13 four_complex_fft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
;;	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 13			;; U - 13 iterations
b6b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 112 values

	lea	esi, [esi-14*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 55 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 112 values to work on.
;; Each loop iteration does 4 sets of 112 values, so
;; we only loop 16 times.

	IF type EQ 4
end7168:lea	esi, [esi-14*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

c5b:	disp eight_reals_unfft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c5b			;;*V - Iterate if necessary

;; Do 13 four_complex_unfft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos2		;; U - Load sin/cos pointer
	mov	al, 13			;; U - 13 iterations
c6b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 2 eight_reals_unfft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

	lea	esi, [esi-14*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
c3b:	disp eight_reals_funny_unfft, 128*dist1, 256*dist1, dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;;*V - Iterate if necessary

;; Do 12 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 3 iterations of 4

	lea	esi, [esi-128*dist1+2*dist512];; U - Load source pointer
	mov	edi, sincos1		;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 4
c4b:	disp four_complex_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 16 seven_reals_first_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	lea	esi, [esi-14*dist512]	;; U - Load source pointer
	mov	eax, 2			;; V - 2 iterations of 8
c2b:	disp seven_reals_last_unfft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 112 values

	lea	esi, [esi-2*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM

;; Perform a 8192-element FFT.  This is done in two passes.  The first
;; pass does 7 levels, working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.  NOTE:  In
;; the first pass every attempt is made to do as much work as possible
;; while the L1-cache line data is loaded.  Consequently, we work on four
;; different sets of 64 values at the same time.

fft8192 MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b, b6b
	LOCAL	c1b, c2b, c3b, c4b, c5b, c6b

;; In pass 1 there are 64 sets of 128 values to work on.
;; Each loop iteration does 4 sets of 128 values, so
;; we only loop 16 times.

	IF type NE 4
	mov	dl, 16			;; U - 16 iterations
b1b:

;; Do 16 eight_reals_first_fft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	mov	eax, 2			;; U - 2 iterations of 8
b2b:	disp eight_reals_first_fft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b2b			;;*V - Iterate if necessary

;; Do 2 eight_reals_fft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

;; Do nothing (FFT level 4)
;; This will turn these 16 real values into 8 complex values.
;; Do 4 two_complex_fft operations (FFT levels 5)
;; Distance between fft data elements is 4 * 64
;; However, for better pipelining we merge two two_complex_fft operations
;; into a single two_two_complex_fft macro that operates on two
;; independent sets of 4 data values.
;;	do 2 iterations

	lea	esi, [esi-2*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
b3b:	disp eight_reals_funny_fft, 128*dist1, 256*dist1, dist512
	dispc two_two_complex_fft_2, 128*dist1, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;;*V - Iterate if necessary

;; Do 12 four_complex_fft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 3 iterations of 4

	lea	esi, [esi-128*dist1+4*dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 4
b4b:	disp four_complex_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	b4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-16*dist512]	;; U - Load source pointer
b5b:	disp eight_reals_fft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	b5b			;;*V - Iterate if necessary

;; Do 15 four_complex_fft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos_real	;; V - Load sin/cos pointer
	mov	al, 15			;; U - 15 iterations
b6b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b6b			;; V - Iterate if necessary

;; Point to next 4 sets of 128 values

	lea	esi, [esi-16*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 1 pass2_six_levels_real and 63 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4
	ENDIF

;; In pass 1 there are 64 sets of 128 values to work on.
;; Each loop iteration does 4 sets of 128 values, so
;; we only loop 16 times.

	IF type EQ 4
end8192:lea	esi, [esi-16*dist512]	;; U - Restore source pointer
	mov	dl, 16			;; V - 16 iterations
c1b:

;; Do 1 eight_reals_unfft_1 macros (FFT level 7)
;;	distance between fft data elements is 1 * 64

c5b:	disp eight_reals_unfft_1, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test loop counter
	JNC_X	c5b			;;*V - Iterate if necessary

;; Do 15 four_complex_unfft macros (FFT levels 6,7)
;;	distance between fft data elements is 1 * 64

	lea	esi, [esi-4*dist1+dist512];; U - Load source pointer
	mov	edi, sincos_real	;; V - Load sin/cos pointer
	mov	al, 15			;; U - 15 iterations
c6b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c6b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c6b			;; V - Iterate if necessary

;; Do 2 eight_reals_unfft operations (FFT levels 4,5,6)
;; Distance between fft data elements is 2 * 64
;;	do 2 iterations

;; Do nothing (FFT level 4)
;; This will turn these 16 real values into 8 complex values.
;; Do 4 two_complex_unfft operations (FFT levels 5)
;; Distance between fft data elements is 4 * 64
;; However, for better pipelining we merge two two_complex_unfft operations
;; into a single two_two_complex_unfft macro that operates on two
;; independent sets of 4 data values.
;;	do 2 iterations

	lea	esi, [esi-16*dist512]	;; U - Next source pointer
	mov	al, 2			;; V - 2 iterations
c3b:	disp eight_reals_funny_unfft, 128*dist1, 256*dist1, dist512
	dispc two_two_complex_unfft_2, 128*dist1, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;;*V - Iterate if necessary

;; Do 12 four_complex_unfft macros (FFT levels 4,5)
;;	distance between fft data elements is 4 * 64
;;	do 3 iterations of 4

	lea	esi, [esi-128*dist1+4*dist512];; U - Load source pointer
	mov	edi, sincos_real	;; U - Load sin/cos pointer
	mov	eax, 3			;; V - 3 iterations of 4
c4b:	disp four_complex_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/4		;; V - Test middle loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 16 eight_reals_first_unfft macros (FFT levels 1,2,3)
;;	distance between fft data elements is 16 * 64
;;	do 2 iterations of 8

	lea	esi, [esi-16*dist512]	;; U - Load source pointer
	mov	eax, 2			;; V - 2 iterations of 8
c2b:	disp eight_reals_last_unfft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+dist1]	;; U - Next source pointer
	add	ah, 256/4		;; V - Test inner loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist1+64*dist1];; U - Next source pointer
	add	al, 256/8		;; V - Test middle loop counter
	JNC_X	c2b			;;*V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c2b			;;*V - Iterate if necessary

;; Point to next 4 sets of 128 values

	lea	esi, [esi-2*dist512+4*dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM

;; Perform a 8192-element FFT using mod 2^N+1 arithmetic.
;; This is done in two passes.  The first pass does 6 levels,
;; working on every 64th element.  The second pass
;; uses common code to perform the last 6 levels of the FFT.

fft8192p MACRO type
	LOCAL	b1b, b2b, b3b, b4b, c1b, c2b, c3b, c4b

;; In pass 1 there are 64 sets of 128 values to work on.

	IF type NE 4
	mov	dl, 64			;; U - 64 iterations
	mov	ecx, plus1_premults	;; V - Address of the multipliers
b1b:

;; Do 16 four_complex_fft macros (FFT levels 1,2)
;;	distance between fft data elements is 16 * 64
;;	do 16 iterations

	mov	edi, ecx		;; U - Address of premultipliers
	mov	al, 2			;; V - 2 iterations of 8
b2b:	disp four_complex_first_fft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b2b			;; V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Do 16 four_complex_fft macros (FFT levels 3,4)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations of 4

	lea	esi, [esi-2*dist512]	;; U - Next source pointer
	mov	edi, sincos_complex	;; V - Load sin/cos pointer
	mov	al, 4			;; U - 4 iterations of 4
b3b:	disp four_complex_fft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 16 four_complex_fft macros (FFT levels 5,6)
;;	distance between fft data elements is 1 * 64
;;	do 16 iterations

	lea	esi, [esi-16*dist512]	;; U - Next source pointer
	mov	edi, sincos_complex	;; U - Load sin/cos pointer
b4b:	disp four_complex_fft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	add	al, 256/16		;; U - Test loop counter
	JNC_X	b4b			;; V - Iterate if necessary

;; Point to next set of 128 values

	lea	esi, [esi-16*dist512+dist1];; U - Next source pointer
	dec	dl			;; V - Test counter
	JNZ_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-64*dist1]	;; U - Restore source pointer
	ENDIF

;; Do the last six FFT levels
;;	do 64 pass2_six_levels_complex

	IF	type NE 4
	JMPP	pass2_six_levels_type_123p
	ENDIF
	IF	type EQ 4
	CALLP	pass2_six_levels_type_4p
	ENDIF

;; In pass 1 there are 64 sets of 128 values to work on.

	IF type EQ 4
end8192p:lea	esi, [esi-16*dist512]	;; U - Restore source pointer
	mov	ecx, plus1_premults	;; V - Address of the multipliers
	mov	dl, 64			;; V - 64 iterations
c1b:

;; Do 16 four_complex_unfft macros (FFT levels 5,6)
;;	distance between fft data elements is 1 * 64
;;	do 16 iterations

	mov	edi, sincos_complex	;; U - Load sin/cos pointer
c4b:	disp four_complex_unfft, 64*dist1, 128*dist1, 256*dist1
	lea	esi, [esi+dist512]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sin/cos values
	add	al, 256/16		;; U - Test loop counter
	JNC_X	c4b			;; V - Iterate if necessary

;; Do 16 four_complex_unfft macros (FFT levels 3,4)
;;	distance between fft data elements is 4 * 64
;;	do 4 iterations of 4

	lea	esi, [esi-16*dist512]	;; U - Load source pointer
	mov	edi, sincos_complex	;; U - Load sin/cos pointer
	mov	al, 4			;; V - 4 iterations of 4
c3b:	disp four_complex_unfft, 256*dist1, dist512, 2*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-256*dist1+4*dist512];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 16 four_complex_unfft macros (FFT levels 1,2)
;;	distance between fft data elements is 16 * 64
;;	do 16 iterations

	lea	esi, [esi-16*dist512]	;; U - Load source pointer
	mov	edi, ecx		;; V - Address of premultipliers
	mov	al, 2			;; U - 2 iterations of 8
c2b:	disp four_complex_last_unfft, 2*dist512, 4*dist512, 8*dist512
	lea	esi, [esi+64*dist1]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next multipliers
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	c2b			;; V - Iterate if necessary
	lea	esi, [esi-512*dist1+dist512];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c2b			;; V - Iterate if necessary
	mov	ecx, edi		;; U - Save address of premultipliers

;; Point to next set of 128 values

	lea	esi, [esi-2*dist512+dist1];; U - Next source pointer
	dec	dl			;; V - Test loop counter
	JNZ_X	c1b			;;*V - Iterate if necessary
	fft_3_ret
	ENDIF
	ENDM
