; Copyright 1998-2001 - Just For Fun Software, Inc., all rights reserved
; Author:  George Woltman
; Email: woltman@alum.mit.edu
;
; These macros take the basic FFT building blocks and build even
; larger building blocks used in the final pass of a multi-pass FFT.
; These are used in 3 pass FFTs using the very convoluted memory model.
;

; ********************************************************
; ********************************************************
; *******************  PASS 1 MACROS  ********************
; ********************************************************
; ********************************************************


; *************** pass1-six-levels-real64 macro ******************
; This macro takes 64 real values and performs the six levels of pass 1
; of the FFT process.

pass1_six_levels_real64_fft MACRO type
	LOCAL	b1b, b2b, b3b

;; Do 8 eight_reals_fft macros (FFT level 1,2,3 on values 1 - 64)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

	mov	al, 2			;; U - 2 iterations of 4
b1b:	disp eight_reals_fft, 2*dist1K, 4*dist1K, 8*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 6 four_complex_fft macros (FFT level 4,5 on values 17 - 64)
;;	distance between fft data elements is 2 * 256
;;	do 3 iterations of 2

	lea	esi, [esi-2*dist1K+4*dist1K];; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; V - 3 iters of 2
b2b:	disp four_complex_fft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop pointer
	JNZ_X	b2b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft macro (FFT level 4,5,6 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-16*dist1K]	;; U - Restore source ptr
	disp eight_reals_fft, 2*dist128, 4*dist128, dist1K

;; Do nothing (FFT level 4 on values 9 - 16)
;; This will turn these 8 real values into 4 complex values.

;; Do 1 four_complex_fft macro (FFT level 5,6 on values 9 - 16)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Load source pointer
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	disp four_complex_fft_2, 2*dist128, 4*dist128, dist1K

;; Do 6 two_two_complex_fft macros (FFT level 6 on values 17 - 128)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	lea	edi, [edi+SCD]		;; V - Load sine/cosine pointer
	mov	al, 6			;; U - 6 iterations
b3b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist128];; U - Next source pointer
	ENDM

; *************** pass1-six-levels-real128 macro ******************
; This macro takes 128 real values and performs the six levels of pass 1
; of the FFT process.  The last 64 values must first go through a no-op step.

pass1_six_levels_real128_fft MACRO type
	LOCAL	b1b, b2b, b3b

;; Do 8 eight_reals_fft macros (FFT level 1,2,3 on values 1 - 64)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

;; Do nothing (FFT level 1 on values 65 - 128)
;; This will turn these 64 real values into 32 complex values.

;; Do 8 four_complex_fft macros (FFT level 2,3 on values 65 - 128)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

	mov	edi, sincos_real	;; U - Load sine/cosine table pointer
	mov	al, 2			;; V - 2 iterations of 4
b1b:	disp eight_reals_fft, 2*dist1K, 4*dist1K, 8*dist1K
	dispc four_complex_fft_2, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 14 four_complex_fft macros (FFT level 4,5 on values 17 - 128)
;;	distance between fft data elements is 2 * 256
;;	do 2 iterations of 3 or 4 iterations of 2.

	lea	esi, [esi-2*dist1K+4*dist1K];; U - Restore source ptr
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/4*256+2	;; V - 2 iters of 3 or 4 iters of 2
b2b:	disp four_complex_fft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	b2b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop pointer
	JNZ_X	b2b			;; V - Iterate if necessary

;; Do 1 eight_reals_fft macro (FFT level 4,5,6 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

;; Do nothing (FFT level 4 on values 9 - 16)
;; This will turn these 8 real values into 4 complex values.

;; Do 1 four_complex_fft macro (FFT level 5,6 on values 9 - 16)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-2*dist16K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	disp eight_reals_fft, 2*dist128, 4*dist128, dist1K
	dispc four_complex_fft_2, 2*dist128, 4*dist128, dist1K, 2*dist1K

;; Do 14 two_two_complex_fft macros (FFT level 6 on values 17 - 128)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+4*dist1K]	;; U - Restore source ptr
	lea	edi, [edi+SCD]		;; V - Load sine/cosine pointer
	mov	al, 2*256/8+2		;; U - 2 iters of 6 or 8 iterations
b3b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K+dist128];; U - Next source ptr
	ENDM

; *************** pass1-six-levels-real64 unfft macro ******************
; This macro takes 64 real values and performs the six levels of pass 1
; of the inverse FFT process.

pass1_six_levels_real64_unfft MACRO type
	LOCAL	b1b, b2b, b3b

;; Do 1 eight_reals_unfft macro (FFT level 4,5,6 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	disp eight_reals_unfft, 2*dist128, 4*dist128, dist1K

;; Do 1 four_complex_unfft macro (FFT level 5,6 on values 9 - 16)
;;	distance between fft data elements is 1 * 256

;; Do nothing (FFT level 4 on values 9 - 16)
;; This will turn these 4 complex values into 8 real values.

	lea	esi, [esi+2*dist1K]	;; U - Load source pointer
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	disp four_complex_unfft_2, 2*dist128, 4*dist128, dist1K

;; Do 6 two_two_complex_unfft macros (FFT level 6 on values 17 - 128)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	lea	edi, [edi+SCD]		;; V - Load sine/cosine pointer
	mov	al, 6			;; U - 6 iterations
b3b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	dec	al			;; U - Test loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 6 four_complex_unfft macros (FFT level 4,5 on values 17 - 64)
;;	distance between fft data elements is 2 * 256
;;	do 3 iterations of 2

	lea	esi, [esi-16*dist1K+4*dist1K];; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; V - 3 iters of 2
b2b:	disp four_complex_unfft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx-dist1K]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test outer loop pointer
	JNZ_X	b2b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-9*dist1K]
	ENDIF

;; Do 8 eight_reals_unfft macros (FFT level 1,2,3 on values 1 - 64)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

	lea	esi, [esi-16*dist1K]	;; U - Restore source ptr
	mov	al, 2			;; V - 2 iterations of 4
b1b:	disp eight_reals_unfft, 2*dist1K, 4*dist1K, 8*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	IFDEF	PFETCH
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist1K+dist128];; U - Next source pointer
	ENDM

; *************** pass1-six-levels-real128 unfft macro ******************
; This macro takes 128 real values and performs the six levels of pass 1
; of the inverse FFT process.  The last 64 values go through a no-op step.

pass1_six_levels_real128_unfft MACRO type
	LOCAL	b1b, b2b, b3b

;; Do 1 eight_reals_unfft macro (FFT level 4,5,6 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

;; Do 1 four_complex_unfft macro (FFT level 5,6 on values 9 - 16)
;;	distance between fft data elements is 1 * 256

;; Do nothing (FFT level 4 on values 9 - 16)
;; This will turn these 4 complex values into 8 real values.

	mov	edi, sincos_real	;; U - Load sine/cosine table pointer
	disp eight_reals_unfft, 2*dist128, 4*dist128, dist1K
	dispc four_complex_unfft_2, 2*dist128, 4*dist128, dist1K, 2*dist1K

;; Do 14 two_two_complex_unfft macros (FFT level 6 on values 17 - 128)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+4*dist1K]	;; U - Restore source ptr
	lea	edi, [edi+SCD]		;; V - Load sine/cosine pointer
	mov	al, 2*256/8+2		;; U - 2 iters of 6 or 8 iterations
b3b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-14*dist1K]
	ENDIF

;; Do 14 four_complex_unfft macros (FFT level 4,5 on values 17 - 128)
;;	distance between fft data elements is 2 * 256
;;	do 2 iterations of 3 or 4 iterations of 2.

	lea	esi, [esi-2*dist16K+4*dist1K];; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/4*256+2	;; V - 2 iters of 3 or 4 iters of 2
b2b:	disp four_complex_unfft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b2b			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	b2b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop pointer
	JNZ_X	b2b			;; V - Iterate if necessary

;; Do 8 eight_reals_unfft macros (FFT level 1,2,3 on values 1 - 64)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

;; Do 8 four_complex_unfft macros (FFT level 2,3 on values 65 - 128)
;;	distance between fft data elements is 8 * 256
;;	do 8 iterations

;; Do nothing (FFT level 1 on values 65 - 128)
;; This will turn these 32 complex values into 64 real values.

	lea	esi, [esi-2*dist16K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 2			;; U - 2 iterations of 4
b1b:	disp eight_reals_unfft, 2*dist1K, 4*dist1K, 8*dist1K
	dispc four_complex_unfft_2, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	IFDEF	PFETCH
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist1K+dist128];; U - Next source ptr
	IFDEF	PFETCH
	lea	ebx, [ebx-15*dist1K+dist16K]
	ENDIF
	ENDM


; *************** pass1-six-levels-complex macro ******************
; This macro takes 64 complex values and performs six levels of pass 1
; of the FFT process.

pass1_six_levels_complex_fft MACRO
	LOCAL	b1a, b1b, b1c, b2b, b3b

;; Do 16 four_complex_fft_gpm macros (FFT level 1,2 on all 64 values)
;; In this section we apply the 16 group multipliers (actually 15 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 16 * 256

	mov	edi, edx		;; U - The 15 group multipliers
	mov	al, 4			;; V - 4 iterations
b1a:	disp four_complex_gpm3_fft_0, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	b1a			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 3			;; U - 3 iterations of 4 iterations
b1b:	lea	edi, [edi+PMD]		;; V - Next group multiplier
b1c:	disp four_complex_gpm4_fft_0, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1c			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 16 four_complex_fft macros (FFT levels 3,4 on all 64 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 4 four_complex_fft_0 macros (FFT levels 3,4 on complex values 1 - 16)
;; Do 4 four_complex_fft_1 macros (FFT levels 3,4 on complex values 17 - 32)
;; Do 4 four_complex_fft_2 macros (FFT levels 3,4 on complex values 33 - 48)
;; Do 4 four_complex_fft_3 macros (FFT levels 3,4 on complex values 49 - 64)
;;	distance between fft data elements is 4 * 256

	lea	esi, [esi-4*dist1K]	;; U - Restore source pointer
	mov	edi, sincos_complex+2*SCD ;; V - Sine/cosine pointer
	disp four_complex_fft_0, dist1K, 2*dist1K, 4*dist1K
	dispc four_complex_fft_1, dist1K, 2*dist1K, 4*dist1K, 8*dist1K
	dispc four_complex_fft_2, dist1K, 2*dist1K, 4*dist1K, dist16K
	lea	edi, [edi+SCD]		;; Sine/cosine pointer
	dispc four_complex_fft_3, dist1K, 2*dist1K, 4*dist1K, dist16K+8*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edx+4*PMD]	;; V - The 3 column multipliers
	mov	al, 3			;; U - 3 more iterations with a premult
b2b:	disp four_complex_cpm_fft_0, dist1K, 2*dist1K, 4*dist1K
	dispc four_complex_cpm_fft_1, dist1K, 2*dist1K, 4*dist1K, 8*dist1K
	dispc four_complex_cpm_fft_2, dist1K, 2*dist1K, 4*dist1K, dist16K
	dispc four_complex_cpm_fft_3, dist1K, 2*dist1K, 4*dist1K, dist16K+8*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	JNZ_X	b2b			;; V - Iterate if necessary

;; Do 1 four_complex_fft_0 macros (FFT levels 5,6 on complex values 1 - 4)
;; Do 1 four_complex_fft_1 macros (FFT levels 5,6 on complex values 5 - 8)
;; Do 14 four_complex_fft macros (FFT levels 5,6 on complex values 9 - 64)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-8*dist128]	;; U - Load source pointer
	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	mov	al, 2			;; V - 2 iterations of 8
b3b:	disp four_complex_fft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K+dist128];; U - Next source pointer
	ENDM

; *************** pass1-six-levels-complex unfft macro ******************
; This macro takes 64 complex values and performs six levels of pass 1
; of the inverse FFT process.

pass1_six_levels_complex_unfft MACRO
	LOCAL	b1a, b1b, b1c, b2b, b3b
	LOCAL	p1, p1a, p2

	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K+dist16K] ;; Compute addr of next block
	test	cl, 256/2
	JNZ_X	p2
	cmp	cl, 1			;; Is this last block?
	je	short p1		;; Yes
	lea	ebx, [esi+2*dist16K]
	cmp	ch, 0C0h
	jb	short p2
	lea	ebx, [esi-6*dist16K+dist128K]
	jmp	short p1a
p1:	mov	ebx, norm_ptr1		;; Next block is probably dist1
	lea	ebx, [ebx+dist1]	;; more than first block address
p1a:	mov	al, [ebx]		;; Preload the TLBs
	mov	al, [ebx+dist1K]
	mov	al, [ebx+2*dist1K]
	mov	al, [ebx+3*dist1K]
	mov	al, [ebx+4*dist1K]
	mov	al, [ebx+5*dist1K]
	mov	al, [ebx+6*dist1K]
	mov	al, [ebx+7*dist1K]
	mov	al, [ebx+8*dist1K]
	mov	al, [ebx+9*dist1K]
	mov	al, [ebx+10*dist1K]
	mov	al, [ebx+11*dist1K]
	mov	al, [ebx+12*dist1K]
	mov	al, [ebx+13*dist1K]
	mov	al, [ebx+14*dist1K]
	mov	al, [ebx+15*dist1K]
p2:
	ENDIF

;; Do 1 four_complex_unfft_0 macros (FFT levels 5,6 on complex values 1 - 4)
;; Do 1 four_complex_unfft_1 macros (FFT levels 5,6 on complex values 5 - 8)
;; Do 14 four_complex_unfft macros (FFT levels 5,6 on complex values 9 - 64)
;;	distance between fft data elements is 1 * 256

	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	mov	eax, 2			;; V - 2 iterations of 4 iters of 2
b3b:	disp four_complex_unfft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/2		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 16 four_complex_unfft macros (FFT levels 3,4 on all 64 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 4 four_complex_unfft_0 macros (FFT levels 3,4 on complex values 1 - 16)
;; Do 4 four_complex_unfft_1 macros (FFT levels 3,4 on complex values 17 - 32)
;; Do 4 four_complex_unfft_2 macros (FFT levels 3,4 on complex values 33 - 48)
;; Do 4 four_complex_unfft_3 macros (FFT levels 3,4 on complex values 49 - 64)
;;	distance between fft data elements is 4 * 256

	lea	esi, [esi-2*dist16K]	;; U - Restore source pointer
	mov	edi, sincos_complex+2*SCD ;; V - Sine/cosine pointer
	disp four_complex_unfft_0, dist1K, 2*dist1K, 4*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx-8*dist1K+4*dist128]
	ENDIF
	dispc four_complex_unfft_1, dist1K, 2*dist1K, 4*dist1K, 8*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	ENDIF
	dispc four_complex_unfft_2, dist1K, 2*dist1K, 4*dist1K, dist16K
	lea	edi, [edi+SCD]		;; Sine/cosine pointer
	dispc four_complex_unfft_3, dist1K, 2*dist1K, 4*dist1K, dist16K+8*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edx+4*PMD]	;; V - The 3 column multipliers
	mov	al, 3			;; U - 3 more iterations with a premult
b2b:	disp four_complex_cpm_unfft_0, dist1K, 2*dist1K, 4*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx-8*dist1K+4*dist128]
	ENDIF
	dispc four_complex_cpm_unfft_1, dist1K, 2*dist1K, 4*dist1K, 8*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	ENDIF
	dispc four_complex_cpm_unfft_2, dist1K, 2*dist1K, 4*dist1K, dist16K
	dispc four_complex_cpm_unfft_3, dist1K, 2*dist1K, 4*dist1K, dist16K+8*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	JNZ_X	b2b			;; V - Iterate if necessary

;; Do 16 four_complex_unfft_gpm macros (FFT level 1,2 on all 64 values)
;; In this section we apply the 16 group multipliers (actually 15 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 16 * 256

	lea	esi, [esi-8*dist128]	;; U - Load source pointer
	mov	edi, edx		;; U - The 15 group multipliers
	mov	al, 4			;; V - 4 iterations
b1a:	disp four_complex_gpm3_unfft_0, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	b1a			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx-8*dist1K+4*dist128]
	prefetcht0 [ebx]
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 3			;; U - 3 iterations of 4 iterations
b1b:	lea	edi, [edi+PMD]		;; V - Next group multiplier
b1c:	disp four_complex_gpm4_unfft_0, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1c			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx-8*dist1K+4*dist128]
	prefetcht0 [ebx]
	prefetcht0 [ebx+4*dist128]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1K+dist128];; U - Next source pointer
	ENDM





; *************** pass1-seven-levels-real128 macro ******************
; This macro takes 128 real values and performs the seven levels of pass 1
; of the FFT process.

pass1_seven_levels_real128_fft MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b

;; Do 16 eight_reals_fft macros (FFT level 1,2,3 on values 1 - 128)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

	mov	al, 4			;; V - 4 iterations of 4
b1b:	disp eight_reals_fft, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 2 eight_reals_fft macros (FFT level 4,5,6 on values 1 - 16)
;;	distance between fft data elements is 2 * 256

;; Do nothing (FFT level 4 on values 17 - 32)
;; This will turn these 16 real values into 8 complex values.

;; Do 2 four_complex_fft macros (FFT level 5,6 on values 17 - 32)
;;	distance between fft data elements is 2 * 256

	lea	esi, [esi-4*dist1K]	;; U - Restore source pointer
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
b2b:	disp eight_reals_fft, 4*dist128, dist1K, 2*dist1K
	dispc four_complex_fft_2, 4*dist128, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	b2b			;;*V - Iterate if necessary

;; Do 12 four_complex_fft macros (FFT level 4,5 on values 33 - 128)
;;	distance between fft data elements is 4 * 256
;;	do 3 iterations of 4

	lea	esi, [esi-4*dist128+8*dist1K];; U - Restore source ptr
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/2*256+2	;; V - 2 iterations of 1 or 2 of 4
b3b:	disp four_complex_fft, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+8*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do eight_reals_1 macros (FFT level 7 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-2*dist16K]	;; U - Restore source pointer
	disp eight_reals_fft_1, 2*dist128, 4*dist128, dist1K

;; Do 3 two_two_complex_fft macros (FFT level 7 on values 9 - 32)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; U - 3 iterations
b4b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 12 four_complex_fft macros (FFT level 6,7 on values 33 - 128)
;;	distance between fft data elements is 1 * 256

	mov	al, 4*256/8+2		;; V - 2 iterations of 4 or 8 iters
b5b:	disp four_complex_fft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b5b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b5b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K+dist128];; U - Restore source ptr
	ENDM

; *************** pass1-seven-levels-real256 macro ******************
; This macro takes 256 real values and performs the seven levels of pass 1
; of the FFT process.  The last 128 values must first go through a no-op step.

pass1_seven_levels_real256_fft MACRO type
	LOCAL	b1b, b2b, b3b, b4b, b5b

;; Do 16 eight_reals_fft macros (FFT level 1,2,3 on values 1 - 128)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

;; Do nothing (FFT level 1 on values 129 - 256)
;; This will turn these 128 real values into 64 complex values.

;; Do 16 four_complex_fft macros (FFT level 2,3 on values 129 - 256)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 4			;; V - 4 iterations of 4
b1b:	disp eight_reals_fft, 4*dist1K, 8*dist1K, dist16K
	dispc four_complex_fft_2, 4*dist1K, 8*dist1K, dist16K, 2*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 2 eight_reals_fft macros (FFT level 4,5,6 on values 1 - 16)
;;	distance between fft data elements is 2 * 256

;; Do nothing (FFT level 4 on values 17 - 32)
;; This will turn these 16 real values into 8 complex values.

;; Do 2 four_complex_fft macros (FFT level 5,6 on values 17 - 32)
;;	distance between fft data elements is 2 * 256

	lea	esi, [esi-4*dist1K]	;; U - Restore source pointer
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
b2b:	disp eight_reals_fft, 4*dist128, dist1K, 2*dist1K
	dispc four_complex_fft_2, 4*dist128, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	b2b			;;*V - Iterate if necessary

;; Do 28 four_complex_fft macros (FFT level 4,5 on values 33 - 256)
;;	distance between fft data elements is 4 * 256
;;	do 7 iterations of 4

	lea	esi, [esi-4*dist128+8*dist1K];; U - Restore source ptr
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/2*256+4	;; V - 4 iterations of 1 or 2 of 4
b3b:	disp four_complex_fft, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+8*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do eight_reals_1 macros (FFT level 7 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-4*dist16K]	;; U - Restore source pointer
	disp eight_reals_fft_1, 2*dist128, 4*dist128, dist1K

;; Do 3 two_two_complex_fft macros (FFT level 7 on values 9 - 32)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; U - 3 iterations
b4b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	b4b			;; V - Iterate if necessary

;; Do 28 four_complex_fft macros (FFT level 6,7 on values 33 - 256)
;;	distance between fft data elements is 1 * 256

	mov	al, 4*256/8+4		;; V - 4 iterations of 4 or 8 iters
b5b:	disp four_complex_fft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b5b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b5b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist16K+dist128];; U - Restore source ptr
	ENDM

; *************** pass1-seven-levels-real128 unfft macro ******************
; This macro takes 128 real values and performs the seven levels of pass 1
; of the inverse FFT process.

pass1_seven_levels_real128_unfft MACRO type
	LOCAL	c1b, c2b, c3b, c4b, c5b

;; Do eight_reals_1 macros (FFT level 7 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	disp eight_reals_unfft_1, 2*dist128, 4*dist128, dist1K

;; Do 3 two_two_complex_unfft macros (FFT level 7 on values 9 - 32)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; U - 3 iterations
c4b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 12 four_complex_unfft macros (FFT level 6,7 on values 33 - 128)
;;	distance between fft data elements is 1 * 256

	mov	al, 4*256/8+2		;; V - 2 iterations of 4 or 8 iters
c5b:	disp four_complex_unfft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	c5b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c5b			;; V - Iterate if necessary

;; Do 2 eight_reals_unfft macros (FFT level 4,5,6 on values 1 - 16)
;;	distance between fft data elements is 2 * 256

;; Do 2 four_complex_unfft macros (FFT level 5,6 on values 17 - 32)
;;	distance between fft data elements is 2 * 256

;; Do nothing (FFT level 4 on values 17 - 32)
;; This will turn these 8 complex values into 16 real values.

	lea	esi, [esi-2*dist16K]	;; U - Restore source pointer
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
c2b:	disp eight_reals_unfft, 4*dist128, dist1K, 2*dist1K
	dispc four_complex_unfft_2, 4*dist128, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	c2b			;;*V - Iterate if necessary

;; Do 12 four_complex_unfft macros (FFT level 4,5 on values 33 - 128)
;;	distance between fft data elements is 4 * 256
;;	do 3 iterations of 4

	lea	esi, [esi-4*dist128+8*dist1K];; U - Restore source ptr
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/2*256+2	;; V - 2 iterations of 1 or 2 of 4
c3b:	disp four_complex_unfft, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+8*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 16 eight_reals_unfft macros (FFT level 1,2,3 on values 1 - 128)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

	lea	esi, [esi-2*dist16K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 4			;; V - 4 iterations of 4
c1b:	disp eight_reals_unfft, 4*dist1K, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c1b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1K+dist128];; U - Restore source ptr
	ENDM

; *************** pass1-seven-levels-real256 unfft macro ******************
; This macro takes 256 real values and performs the seven levels of pass 1
; of the inverse FFT process.  The last 128 values go through a no-op step.

pass1_seven_levels_real256_unfft MACRO type
	LOCAL	c1b, c2b, c3b, c4b, c5b

;; Do eight_reals_1 macros (FFT level 7 on values 1 - 8)
;;	distance between fft data elements is 1 * 256

	disp eight_reals_unfft_1, 2*dist128, 4*dist128, dist1K

;; Do 3 two_two_complex_unfft macros (FFT level 7 on values 9 - 32)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi+2*dist1K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 3			;; U - 3 iterations
c4b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	dec	al			;; U - Test loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 28 four_complex_unfft macros (FFT level 6,7 on values 33 - 256)
;;	distance between fft data elements is 1 * 256

	mov	eax, 2*256/4+4		;; V - 4 iters of 2 or 4 iters of 2
c5b:	disp four_complex_unfft, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/2		;; U - Test inner loop counter
	JNC_X	c5b			;; V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	al, 256/4		;; U - Test inner loop counter
	JNC_X	c5b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c5b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-14*dist1K+dist16K]
	ENDIF

;; Do 2 eight_reals_unfft macros (FFT level 4,5,6 on values 1 - 16)
;;	distance between fft data elements is 2 * 256

;; Do 2 four_complex_unfft macros (FFT level 5,6 on values 17 - 32)
;;	distance between fft data elements is 2 * 256

;; Do nothing (FFT level 4 on values 17 - 32)
;; This will turn these 8 complex values into 16 real values.

	lea	esi, [esi-4*dist16K]	;; U - Restore source pointer
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
c2b:	disp eight_reals_unfft, 4*dist128, dist1K, 2*dist1K
	dispc four_complex_unfft_2, 4*dist128, dist1K, 2*dist1K, 4*dist1K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test loop counter
	JNC_X	c2b			;;*V - Iterate if necessary

;; Do 28 four_complex_unfft macros (FFT level 4,5 on values 33 - 256)
;;	distance between fft data elements is 4 * 256
;;	do 7 iterations of 4

	lea	esi, [esi-4*dist128+8*dist1K];; U - Restore source ptr
;;	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	eax, 256/2*256+4	;; V - 4 iterations of 1 or 2 of 4
c3b:	disp four_complex_unfft, dist1K, 2*dist1K, 4*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	prefetcht0 [ebx+dist1K]
	lea	ebx, [ebx+2*dist1K]
	ENDIF
	lea	esi, [esi-8*dist128+8*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K+dist16K]
	ENDIF

;; Do 16 eight_reals_unfft macros (FFT level 1,2,3 on values 1 - 128)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

;; Do 16 four_complex_unfft macros (FFT level 2,3 on values 129 - 256)
;;	distance between fft data elements is 16 * 256
;;	do 16 iterations

;; Do nothing (FFT level 1 on values 129 - 256)
;; This will turn these 64 complex values into 128 real values.

	lea	esi, [esi-4*dist16K]	;; U - Restore source ptr
	mov	edi, sincos_real	;; V - Load sine/cosine table pointer
	mov	al, 4			;; V - 4 iterations of 4
c1b:	disp eight_reals_unfft, 4*dist1K, 8*dist1K, dist16K
	dispc four_complex_unfft_2, 4*dist1K, 8*dist1K, dist16K, 2*dist16K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c1b			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c1b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist1K+dist128];; U - Restore source ptr
	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K-2*dist16K+4*dist128]
	ENDIF
	ENDM

; *************** pass1-seven-levels-complex macro ******************
; This macro takes 128 complex values and performs seven levels of pass 1
; of the FFT process.

pass1_seven_levels_complex_fft MACRO
	LOCAL	b1a, b1b, b1c, b2a, b2b, b3b, b4b

;; Do 32 four_complex_fft_gpm macros (FFT level 1,2 on all 128 values)
;; In this section we apply the 32 group multipliers (actually 31 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 32 * 256

	mov	edi, edx		;; U - The 31 group multipliers
	mov	al, 4			;; V - 4 iterations of 8
b1a:	disp four_complex_gpm3_fft_0, 8*dist1K, dist16K, 2*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	b1a			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 7			;; V - 7 iterations of 4
b1b:	lea	edi, [edi+PMD]		;; U - Next group multiplier
b1c:	disp four_complex_gpm4_fft_0, 8*dist1K, dist16K, 2*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1c			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 32 four_complex_fft macros (FFT level 3,4 on all 128 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 8 four_complex_fft_0 macros (FFT level 3,4 on complex values 1 - 32)
;; Do 8 four_complex_fft_1 macros (FFT level 3,4 on complex values 33 - 64)
;; Do 8 four_complex_fft_2 macros (FFT level 3,4 on complex values 65 - 96)
;; Do 8 four_complex_fft_3 macros (FFT level 3,4 on complex values 97 - 128)
;;	distance between fft data elements is 8 * 256

	lea	esi, [esi-8*dist1K]	;; U - Restore source pointer
	mov	ah, 2			;; V - 2 iterations
b2a:	dispc four_complex_fft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_fft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	mov	edi, sincos_complex+2*SCD;; Sine/cosine pointer
	dispc four_complex_fft_2, 2*dist1K, 4*dist1K, 8*dist1K, 2*dist16K
	lea	edi, [edi+SCD]		;; Sine/cosine pointer
	dispc four_complex_fft_3, 2*dist1K, 4*dist1K, 8*dist1K, 3*dist16K
	lea	edi, [edx+8*PMD]	;; U - The 3 column multipliers
	lea	esi, [esi+2*dist128]	;; V - Next source pointer
	mov	al, 3			;; U - 3 more iterations with a premult
b2b:	dispc four_complex_cpm_fft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_fft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	dispc four_complex_cpm_fft_2, 2*dist1K, 4*dist1K, 8*dist1K, 2*dist16K
	dispc four_complex_cpm_fft_3, 2*dist1K, 4*dist1K, 8*dist1K, 3*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	JNZ_X	b2b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	ah			;; U - Test outer loop counter
	JNZ_X	b2a			;; V - Iterate if necessary

;; Do 32 four_complex_fft macros (FFT level 5,6 on complex values 1 - 128)
;;	distance between fft data elements is 2 * 256

	lea	esi, [esi-2*dist1K]	;; U - Restore source pointer
	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	mov	eax, 4			;; U - 4 iterations of 4 iters of 2
b3b:	disp four_complex_fft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 32 two_two_complex_fft_n macros (FFT level 7 on all values)
;;	distance between fft data elements is 1 * 256

	lea	esi, [esi-4*dist16K]	;; U - Restore source ptr
	mov	edi, sincos_complex	;; V - Load sine/cosine table pointer
	mov	al, 4			;; U - 4 iterations of 8
b4b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-4*dist16K+dist128];; U - Next source pointer
	ENDM

; *************** pass1-seven-levels-complex unfft macro ******************
; This macro takes 128 complex values and performs seven levels of pass 1
; of the inverse FFT process.

pass1_seven_levels_complex_unfft MACRO
	LOCAL	c1a, c1b, c1c, c2a, c2b, c3b, c4b

	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K-3*dist16K+4*dist128] ;; Addr of next block?
	test	cl, 256/2
	JNZ_X	p2
	cmp	cl, 1			;; Is this last block?
	je	short p1		;; Yes
	lea	ebx, [esi+4*dist16K]
	cmp	ch, 080h
	jb	short p2
	lea	ebx, [esi-4*dist16K+dist128K]
	jmp	short p1a
p1:	mov	ebx, norm_ptr1		;; Next block is probably dist1
	lea	ebx, [ebx+dist1]	;; more than first block address
p1a:	mov	al, [ebx]		;; Preload the TLBs
	mov	al, [ebx+dist1K]
	mov	al, [ebx+2*dist1K]
	mov	al, [ebx+3*dist1K]
	mov	al, [ebx+4*dist1K]
	mov	al, [ebx+5*dist1K]
	mov	al, [ebx+6*dist1K]
	mov	al, [ebx+7*dist1K]
	mov	al, [ebx+8*dist1K]
	mov	al, [ebx+9*dist1K]
	mov	al, [ebx+10*dist1K]
	mov	al, [ebx+11*dist1K]
	mov	al, [ebx+12*dist1K]
	mov	al, [ebx+13*dist1K]
	mov	al, [ebx+14*dist1K]
	mov	al, [ebx+15*dist1K]
p2:
	ENDIF

;; Do 32 two_two_complex_unfft_n macros (FFT level 7 on all values)
;;	distance between fft data elements is 1 * 256

	mov	edi, sincos_complex	;; V - Load sine/cosine table pointer
	mov	eax, 4			;; U - 4 iterations of 4 iters of 2
c4b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/2		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	add	ah, 256/4		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K+dist16K]
	ENDIF

;; Do 32 four_complex_unfft macros (FFT level 5,6 on complex values 1 - 128)
;;	distance between fft data elements is 2 * 256

	lea	esi, [esi-4*dist16K]	;; U - Restore source pointer
	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	mov	eax, 4			;; U - 4 iterations of 4 iters of 2
c3b:	disp four_complex_unfft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	lea	ebx, [ebx+dist1K]
	ENDIF
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K+dist16K]
	ENDIF

;; Do 32 four_complex_unfft macros (FFT level 3,4 on all 128 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 8 four_complex_unfft_0 macros (FFT level 3,4 on complex values 1 - 32)
;; Do 8 four_complex_unfft_1 macros (FFT level 3,4 on complex values 33 - 64)
;; Do 8 four_complex_unfft_2 macros (FFT level 3,4 on complex values 65 - 96)
;; Do 8 four_complex_unfft_3 macros (FFT level 3,4 on complex values 97 - 128)
;;	distance between fft data elements is 8 * 256

	lea	esi, [esi-4*dist16K]	;; U - Restore source pointer
	mov	ah, 2			;; V - 2 iterations
c2a:	dispc four_complex_unfft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_unfft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	ENDIF
	mov	edi, sincos_complex+2*SCD;; Sine/cosine pointer
	dispc four_complex_unfft_2, 2*dist1K, 4*dist1K, 8*dist1K, 2*dist16K
	lea	edi, [edi+SCD]		;; Sine/cosine pointer
	dispc four_complex_unfft_3, 2*dist1K, 4*dist1K, 8*dist1K, 3*dist16K
	IFDEF	PFETCH
	prefetcht0 [ebx+dist1K]
	lea	ebx, [ebx+2*dist1K]
	ENDIF
	lea	edi, [edx+8*PMD]	;; U - The 3 column multipliers
	lea	esi, [esi+2*dist128]	;; V - Next source pointer
	mov	al, 3			;; U - 3 more iterations with a premult
c2b:	dispc four_complex_cpm_unfft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_unfft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	IFDEF	PFETCH
	prefetcht0 [ebx]
	ENDIF
	dispc four_complex_cpm_unfft_2, 2*dist1K, 4*dist1K, 8*dist1K, 2*dist16K
	dispc four_complex_cpm_unfft_3, 2*dist1K, 4*dist1K, 8*dist1K, 3*dist16K
	IFDEF	PFETCH
	prefetcht0 [ebx+dist1K]
	lea	ebx, [ebx+2*dist1K]
	ENDIF
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	JNZ_X	c2b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	ah			;; U - Test outer loop counter
	JNZ_X	c2a			;; V - Iterate if necessary
	IFDEF	PFETCH
	lea	ebx, [ebx-16*dist1K+dist16K]
	ENDIF

;; Do 32 four_complex_unfft_gpm macros (FFT level 1,2 on all 128 values)
;; In this section we apply the 32 group multipliers (actually 31 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 32 * 256

	lea	esi, [esi-2*dist1K]	;; U - Restore source pointer
	mov	edi, edx		;; U - The 31 group multipliers
	mov	al, 4			;; V - 4 iterations of 8
c1a:	disp four_complex_gpm3_unfft_0, 8*dist1K, dist16K, 2*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	c1a			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	prefetcht0 [ebx+dist1K]
	lea	ebx, [ebx+2*dist1K]
	ENDIF
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 7			;; V - 7 iterations of 4
c1b:	lea	edi, [edi+PMD]		;; U - Next group multiplier
c1c:	disp four_complex_gpm4_unfft_0, 8*dist1K, dist16K, 2*dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c1c			;;*V - Iterate if necessary
	IFDEF	PFETCH
	prefetcht0 [ebx]
	prefetcht0 [ebx+dist1K]
	lea	ebx, [ebx+2*dist1K]
	ENDIF
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c1b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist1K+dist128];; U - Next source pointer
	ENDM



; *************** pass1-seven-levels-complex macro ******************
; This macro takes 128 complex values and performs seven levels of pass 1
; of the FFT process.
; This is a special version where dist32K is stored in ebx.  This value
; will be either 2*dist16K or (dist128K-6*dist16K)

pass1_seven_levels_a_complex_fft MACRO
	LOCAL	b1a, b1b, b1c, b2a, b2b, b3b, b4b

;; Do 32 four_complex_fft_gpm macros (FFT level 1,2 on all 128 values)
;; In this section we apply the 32 group multipliers (actually 31 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 32 * 256

	mov	edi, edx		;; U - The 31 group multipliers
	mov	al, 4			;; V - 4 iterations of 8
b1a:	dispsp four_complex_gpm3_fft_0, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	b1a			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 7			;; V - 7 iterations of 4
b1b:	lea	edi, [edi+PMD]		;; U - Next group multiplier
b1c:	dispsp four_complex_gpm4_fft_0, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	b1c			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	b1b			;; V - Iterate if necessary

;; Do 32 four_complex_fft macros (FFT level 3,4 on all 128 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 8 four_complex_fft_0 macros (FFT level 3,4 on complex values 1 - 32)
;; Do 8 four_complex_fft_1 macros (FFT level 3,4 on complex values 33 - 64)
;; Do 8 four_complex_fft_2 macros (FFT level 3,4 on complex values 65 - 96)
;; Do 8 four_complex_fft_3 macros (FFT level 3,4 on complex values 97 - 128)
;;	distance between fft data elements is 8 * 256

	lea	esi, [esi-8*dist1K]	;; U - Restore source pointer
	mov	ah, 2			;; V - 2 iterations
b2a:	dispc four_complex_fft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_fft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	add	esi, ebx		;; U - Next source pointer
	mov	edi, sincos_complex+2*SCD;; V - Sine/cosine pointer
	dispc four_complex_fft_2, 2*dist1K, 4*dist1K, 8*dist1K, 0
	lea	edi, [edi+SCD]		;; U - Sine/cosine pointer
	dispc four_complex_fft_3, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	sub	esi, ebx		;; U - Restore source pointer
	lea	edi, [edx+8*PMD]	;; V - The 3 column multipliers
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	mov	al, 3			;; V - 3 more iterations with a premult
b2b:	dispc four_complex_cpm_fft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_fft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	add	esi, ebx		;; U - Next source pointer
	dispc four_complex_cpm_fft_2, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_fft_3, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	sub	esi, ebx		;; U - Restore source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	JNZ_X	b2b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	ah			;; U - Test outer loop counter
	JNZ_X	b2a			;; V - Iterate if necessary

;; Do 32 four_complex_fft macros (FFT level 5,6 on complex values 1 - 128)
;;	distance between fft data elements is 2 * 256

	lea	esi, [esi-2*dist1K]	;; U - Restore source pointer
	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	mov	eax, 2*256+2		;; U - 2 iterations of 2 of 4 of 2
b3b:	disp four_complex_fft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	b3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	ah			;; V - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K][ebx];; U - Next source pointer
	mov	ah, 2			;; V - Restore loop counter
	dec	al			;; U - Test outer loop counter
	JNZ_X	b3b			;; V - Iterate if necessary

;; Do 32 two_two_complex_fft_n macros (FFT level 7 on all values)
;;	distance between fft data elements is 1 * 256

	sub	esi, ebx		;; U - Restore source ptr
	mov	edi, sincos_complex	;; V - Load sine/cosine table pointer
	sub	esi, ebx		;; U - Restore source ptr
	mov	eax, 2			;; V - 2 iterations of 2 of 8
b4b:	disp two_two_complex_fft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	b4b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K][ebx];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	b4b			;; V - Iterate if necessary
	sub	esi, ebx		;; U - Restore source ptr
	sub	esi, ebx		;; U - Restore source ptr
	add	esi, dist128		;; U - Next source pointer
	ENDM

; *************** pass1-seven-levels-complex unfft macro ******************
; This macro takes 128 complex values and performs seven levels of pass 1
; of the inverse FFT process.

pass1_seven_levels_a_complex_unfft MACRO
	LOCAL	c1a, c1b, c1c, c2a, c2b, c3b, c4b

;; Do 32 two_two_complex_unfft_n macros (FFT level 7 on all values)
;;	distance between fft data elements is 1 * 256

	mov	edi, sincos_complex	;; U - Load sine/cosine table pointer
	mov	eax, 2			;; V - 2 iterations 2 of 8
c4b:	disp two_two_complex_unfft_n, 2*dist128, 4*dist128, dist1K
	lea	esi, [esi+2*dist1K]	;; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	al, 256/8		;; U - Test inner loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	add	ah, 256/2		;; U - Test middle loop counter
	JNC_X	c4b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K][ebx];; U - Next source pointer
	dec	al			;; V - Test outer loop counter
	JNZ_X	c4b			;; V - Iterate if necessary

;; Do 32 four_complex_unfft macros (FFT level 5,6 on complex values 1 - 128)
;;	distance between fft data elements is 2 * 256

	sub	esi, ebx		;; U - Restore source ptr
	mov	edi, sincos_complex	;; V - Load sine/cosine ptr
	sub	esi, ebx		;; U - Restore source ptr
	mov	eax, 2*256+2		;; U - 2 iterations of 2 of 4 of 2
c3b:	disp four_complex_unfft, 4*dist128, dist1K, 2*dist1K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/2		;; V - Test inner loop counter
	JNC_X	c3b			;;*V - Iterate if necessary
	lea	esi, [esi-4*dist128+4*dist1K];; U - Next source pointer
	lea	edi, [edi+SCD]		;; V - Next sine/cosine pointer
	add	ah, 256/4		;; U - Test middle loop counter
	JNC_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-16*dist1K+dist16K];; U - Next source pointer
	dec	ah			;; V - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary
	lea	esi, [esi-2*dist16K][ebx];; U - Next source pointer
	mov	ah, 2			;; V - Restore loop counter
	dec	al			;; U - Test outer loop counter
	JNZ_X	c3b			;; V - Iterate if necessary

;; Do 32 four_complex_unfft macros (FFT level 3,4 on all 128 values)
;; In this section we also apply the 4 column multipliers (actually three
;; since the first column multiplier is always one).  To make things
;; run faster we precompute the column multipliers times the 4 different
;; sine/cosine multipliers we run into in this section.  This costs some
;; memory but saves us some complex multiplies.
;; Do 8 four_complex_unfft_0 macros (FFT level 3,4 on complex values 1 - 32)
;; Do 8 four_complex_unfft_1 macros (FFT level 3,4 on complex values 33 - 64)
;; Do 8 four_complex_unfft_2 macros (FFT level 3,4 on complex values 65 - 96)
;; Do 8 four_complex_unfft_3 macros (FFT level 3,4 on complex values 97 - 128)
;;	distance between fft data elements is 8 * 256

	sub	esi, ebx		;; U - Restore source ptr
	mov	ah, 2			;; V - 2 iterations
	sub	esi, ebx		;; U - Restore source ptr
c2a:	dispc four_complex_unfft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_unfft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	add	esi, ebx		;; U - Next source pointer
	mov	edi, sincos_complex+2*SCD;; V - Sine/cosine pointer
	dispc four_complex_unfft_2, 2*dist1K, 4*dist1K, 8*dist1K, 0
	lea	edi, [edi+SCD]		;; Sine/cosine pointer
	dispc four_complex_unfft_3, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	sub	esi, ebx		;; U - Restore source pointer
	lea	edi, [edx+8*PMD]	;; V - The 3 column multipliers
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	mov	al, 3			;; V - 3 more iterations with a premult
c2b:	dispc four_complex_cpm_unfft_0, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_unfft_1, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	add	esi, ebx		;; U - Next source pointer
	dispc four_complex_cpm_unfft_2, 2*dist1K, 4*dist1K, 8*dist1K, 0
	dispc four_complex_cpm_unfft_3, 2*dist1K, 4*dist1K, 8*dist1K, dist16K
	sub	esi, ebx		;; U - Restore source pointer
	lea	edi, [edi+PMD]		;; V - Next column multiplier
	dec	al			;; U - Test inner loop counter
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	JNZ_X	c2b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	ah			;; U - Test outer loop counter
	JNZ_X	c2a			;; V - Iterate if necessary

;; Do 32 four_complex_unfft_gpm macros (FFT level 1,2 on all 128 values)
;; In this section we apply the 32 group multipliers (actually 31 since the
;; first multiplier is always one).  We will apply the column multipliers
;; in the next section.
;;	distance between fft data elements is 32 * 256

	lea	esi, [esi-2*dist1K]	;; U - Restore source pointer
	mov	edi, edx		;; U - The 31 group multipliers
	mov	al, 4			;; V - 4 iterations of 8
c1a:	dispsp four_complex_gpm3_unfft_0, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	dec	al			;; V - Test inner loop counter
	JNZ_X	c1a			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	mov	al, 7			;; V - 7 iterations of 4
c1b:	lea	edi, [edi+PMD]		;; U - Next group multiplier
c1c:	dispsp four_complex_gpm4_unfft_0, 8*dist1K, dist16K
	lea	esi, [esi+2*dist128]	;; U - Next source pointer
	add	al, 256/4		;; V - Test inner loop counter
	JNC_X	c1c			;;*V - Iterate if necessary
	lea	esi, [esi-8*dist128+dist1K];; U - Next source pointer
	dec	al			;; U - Test outer loop counter
	JNZ_X	c1b			;; V - Iterate if necessary
	lea	esi, [esi-8*dist1K+dist128];; U - Next source pointer
	ENDM
